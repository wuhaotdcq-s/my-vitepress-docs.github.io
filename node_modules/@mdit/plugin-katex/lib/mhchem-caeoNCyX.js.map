{"version":3,"file":"mhchem-caeoNCyX.js","sources":["../../../node_modules/.pnpm/katex@0.16.22/node_modules/katex/dist/contrib/mhchem.mjs"],"sourcesContent":["import katex from '../katex.mjs';\n\n/* eslint-disable */\n\n/* -*- Mode: JavaScript; indent-tabs-mode:nil; js-indent-level: 2 -*- */\n\n/* vim: set ts=2 et sw=2 tw=80: */\n\n/*************************************************************\n *\n *  KaTeX mhchem.js\n *\n *  This file implements a KaTeX version of mhchem version 3.3.0.\n *  It is adapted from MathJax/extensions/TeX/mhchem.js\n *  It differs from the MathJax version as follows:\n *    1. The interface is changed so that it can be called from KaTeX, not MathJax.\n *    2. \\rlap and \\llap are replaced with \\mathrlap and \\mathllap.\n *    3. Four lines of code are edited in order to use \\raisebox instead of \\raise.\n *    4. The reaction arrow code is simplified. All reaction arrows are rendered\n *       using KaTeX extensible arrows instead of building non-extensible arrows.\n *    5. \\tripledash vertical alignment is slightly adjusted.\n *\n *    This code, as other KaTeX code, is released under the MIT license.\n * \n * /*************************************************************\n *\n *  MathJax/extensions/TeX/mhchem.js\n *\n *  Implements the \\ce command for handling chemical formulas\n *  from the mhchem LaTeX package.\n *\n *  ---------------------------------------------------------------------\n *\n *  Copyright (c) 2011-2015 The MathJax Consortium\n *  Copyright (c) 2015-2018 Martin Hensel\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n//\n// Coding Style\n//   - use '' for identifiers that can by minified/uglified\n//   - use \"\" for strings that need to stay untouched\n// version: \"3.3.0\" for MathJax and KaTeX\n// Add \\ce, \\pu, and \\tripledash to the KaTeX macros.\nkatex.__defineMacro(\"\\\\ce\", function (context) {\n  return chemParse(context.consumeArgs(1)[0], \"ce\");\n});\n\nkatex.__defineMacro(\"\\\\pu\", function (context) {\n  return chemParse(context.consumeArgs(1)[0], \"pu\");\n}); //  Needed for \\bond for the ~ forms\n//  Raise by 2.56mu, not 2mu. We're raising a hyphen-minus, U+002D, not \n//  a mathematical minus, U+2212. So we need that extra 0.56.\n\n\nkatex.__defineMacro(\"\\\\tripledash\", \"{\\\\vphantom{-}\\\\raisebox{2.56mu}{$\\\\mkern2mu\" + \"\\\\tiny\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern2mu$}}\");\n//  This is the main function for handing the \\ce and \\pu commands.\n//  It takes the argument to \\ce or \\pu and returns the corresponding TeX string.\n//\n\nvar chemParse = function chemParse(tokens, stateMachine) {\n  // Recreate the argument string from KaTeX's array of tokens.\n  var str = \"\";\n  var expectedLoc = tokens.length && tokens[tokens.length - 1].loc.start;\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    if (tokens[i].loc.start > expectedLoc) {\n      // context.consumeArgs has eaten a space.\n      str += \" \";\n      expectedLoc = tokens[i].loc.start;\n    }\n\n    str += tokens[i].text;\n    expectedLoc += tokens[i].text.length;\n  }\n\n  var tex = texify.go(mhchemParser.go(str, stateMachine));\n  return tex;\n}; //\n// Core parser for mhchem syntax  (recursive)\n//\n\n/** @type {MhchemParser} */\n\n\nvar mhchemParser = {\n  //\n  // Parses mchem \\ce syntax\n  //\n  // Call like\n  //   go(\"H2O\");\n  //\n  go: function go(input, stateMachine) {\n    if (!input) {\n      return [];\n    }\n\n    if (stateMachine === undefined) {\n      stateMachine = 'ce';\n    }\n\n    var state = '0'; //\n    // String buffers for parsing:\n    //\n    // buffer.a == amount\n    // buffer.o == element\n    // buffer.b == left-side superscript\n    // buffer.p == left-side subscript\n    // buffer.q == right-side subscript\n    // buffer.d == right-side superscript\n    //\n    // buffer.r == arrow\n    // buffer.rdt == arrow, script above, type\n    // buffer.rd == arrow, script above, content\n    // buffer.rqt == arrow, script below, type\n    // buffer.rq == arrow, script below, content\n    //\n    // buffer.text_\n    // buffer.rm\n    // etc.\n    //\n    // buffer.parenthesisLevel == int, starting at 0\n    // buffer.sb == bool, space before\n    // buffer.beginsWithBond == bool\n    //\n    // These letters are also used as state names.\n    //\n    // Other states:\n    // 0 == begin of main part (arrow/operator unlikely)\n    // 1 == next entity\n    // 2 == next entity (arrow/operator unlikely)\n    // 3 == next atom\n    // c == macro\n    //\n\n    /** @type {Buffer} */\n\n    var buffer = {};\n    buffer['parenthesisLevel'] = 0;\n    input = input.replace(/\\n/g, \" \");\n    input = input.replace(/[\\u2212\\u2013\\u2014\\u2010]/g, \"-\");\n    input = input.replace(/[\\u2026]/g, \"...\"); //\n    // Looks through mhchemParser.transitions, to execute a matching action\n    // (recursive)\n    //\n\n    var lastInput;\n    var watchdog = 10;\n    /** @type {ParserOutput[]} */\n\n    var output = [];\n\n    while (true) {\n      if (lastInput !== input) {\n        watchdog = 10;\n        lastInput = input;\n      } else {\n        watchdog--;\n      } //\n      // Find actions in transition table\n      //\n\n\n      var machine = mhchemParser.stateMachines[stateMachine];\n      var t = machine.transitions[state] || machine.transitions['*'];\n\n      iterateTransitions: for (var i = 0; i < t.length; i++) {\n        var matches = mhchemParser.patterns.match_(t[i].pattern, input);\n\n        if (matches) {\n          //\n          // Execute actions\n          //\n          var task = t[i].task;\n\n          for (var iA = 0; iA < task.action_.length; iA++) {\n            var o; //\n            // Find and execute action\n            //\n\n            if (machine.actions[task.action_[iA].type_]) {\n              o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n            } else if (mhchemParser.actions[task.action_[iA].type_]) {\n              o = mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n            } else {\n              throw [\"MhchemBugA\", \"mhchem bug A. Please report. (\" + task.action_[iA].type_ + \")\"]; // Trying to use non-existing action\n            } //\n            // Add output\n            //\n\n\n            mhchemParser.concatArray(output, o);\n          } //\n          // Set next state,\n          // Shorten input,\n          // Continue with next character\n          //   (= apply only one transition per position)\n          //\n\n\n          state = task.nextState || state;\n\n          if (input.length > 0) {\n            if (!task.revisit) {\n              input = matches.remainder;\n            }\n\n            if (!task.toContinue) {\n              break iterateTransitions;\n            }\n          } else {\n            return output;\n          }\n        }\n      } //\n      // Prevent infinite loop\n      //\n\n\n      if (watchdog <= 0) {\n        throw [\"MhchemBugU\", \"mhchem bug U. Please report.\"]; // Unexpected character\n      }\n    }\n  },\n  concatArray: function concatArray(a, b) {\n    if (b) {\n      if (Array.isArray(b)) {\n        for (var iB = 0; iB < b.length; iB++) {\n          a.push(b[iB]);\n        }\n      } else {\n        a.push(b);\n      }\n    }\n  },\n  patterns: {\n    //\n    // Matching patterns\n    // either regexps or function that return null or {match_:\"a\", remainder:\"bc\"}\n    //\n    patterns: {\n      // property names must not look like integers (\"2\") for correct property traversal order, later on\n      'empty': /^$/,\n      'else': /^./,\n      'else2': /^./,\n      'space': /^\\s/,\n      'space A': /^\\s(?=[A-Z\\\\$])/,\n      'space$': /^\\s$/,\n      'a-z': /^[a-z]/,\n      'x': /^x/,\n      'x$': /^x$/,\n      'i$': /^i$/,\n      'letters': /^(?:[a-zA-Z\\u03B1-\\u03C9\\u0391-\\u03A9?@]|(?:\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))))+/,\n      '\\\\greek': /^\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))/,\n      'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,\n      '$one lowercase latin letter$ $': /^\\$(?:([a-z])(?:$|[^a-zA-Z]))\\$$/,\n      'one lowercase greek letter $': /^(?:\\$?[\\u03B1-\\u03C9]\\$?|\\$?\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\\s*\\$?)(?:\\s+|\\{\\}|(?![a-zA-Z]))$/,\n      'digits': /^[0-9]+/,\n      '-9.,9': /^[+\\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))/,\n      '-9.,9 no missing 0': /^[+\\-]?[0-9]+(?:[.,][0-9]+)?/,\n      '(-)(9.,9)(e)(99)': function e99(input) {\n        var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))?(\\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))\\))?(?:([eE]|\\s*(\\*|x|\\\\times|\\u00D7)\\s*10\\^)([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\}))?/);\n\n        if (m && m[0]) {\n          return {\n            match_: m.splice(1),\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      '(-)(9)^(-9)': function _(input) {\n        var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+)?)\\^([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\})/);\n\n        if (m && m[0]) {\n          return {\n            match_: m.splice(1),\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      'state of aggregation $': function stateOfAggregation$(input) {\n        // ... or crystal system\n        var a = mhchemParser.patterns.findObserveGroups(input, \"\", /^\\([a-z]{1,3}(?=[\\),])/, \")\", \"\"); // (aq), (aq,$\\infty$), (aq, sat)\n\n        if (a && a.remainder.match(/^($|[\\s,;\\)\\]\\}])/)) {\n          return a;\n        } //  AND end of 'phrase'\n\n\n        var m = input.match(/^(?:\\((?:\\\\ca\\s?)?\\$[amothc]\\$\\))/); // OR crystal system ($o$) (\\ca$c$)\n\n        if (m) {\n          return {\n            match_: m[0],\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      '_{(state of aggregation)}$': /^_\\{(\\([a-z]{1,3}\\))\\}/,\n      '{[(': /^(?:\\\\\\{|\\[|\\()/,\n      ')]}': /^(?:\\)|\\]|\\\\\\})/,\n      ', ': /^[,;]\\s*/,\n      ',': /^[,;]/,\n      '.': /^[.]/,\n      '. ': /^([.\\u22C5\\u00B7\\u2022])\\s*/,\n      '...': /^\\.\\.\\.(?=$|[^.])/,\n      '* ': /^([*])\\s*/,\n      '^{(...)}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^{\", \"\", \"\", \"}\");\n      },\n      '^($...$)': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", \"$\", \"$\", \"\");\n      },\n      '^a': /^\\^([0-9]+|[^\\\\_])/,\n      '^\\\\x{}{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '^\\\\x{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '^\\\\x': /^\\^(\\\\[a-zA-Z]+)\\s*/,\n      '^(-1)': /^\\^(-?\\d+)/,\n      '\\'': /^'/,\n      '_{(...)}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_{\", \"\", \"\", \"}\");\n      },\n      '_($...$)': function _$$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", \"$\", \"$\", \"\");\n      },\n      '_9': /^_([+\\-]?[0-9]+|[^\\\\])/,\n      '_\\\\x{}{}': function _X(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '_\\\\x{}': function _X(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '_\\\\x': /^_(\\\\[a-zA-Z]+)\\s*/,\n      '^_': /^(?:\\^(?=_)|\\_(?=\\^)|[\\^_]$)/,\n      '{}': /^\\{\\}/,\n      '{...}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", \"{\", \"}\", \"\");\n      },\n      '{(...)}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"{\", \"\", \"\", \"}\");\n      },\n      '$...$': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n      },\n      '${(...)}$': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"${\", \"\", \"\", \"}$\");\n      },\n      '$(...)$': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"$\", \"\", \"\", \"$\");\n      },\n      '=<>': /^[=<>]/,\n      '#': /^[#\\u2261]/,\n      '+': /^\\+/,\n      '-$': /^-(?=[\\s_},;\\]/]|$|\\([a-z]+\\))/,\n      // -space -, -; -] -/ -$ -state-of-aggregation\n      '-9': /^-(?=[0-9])/,\n      '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\\s,;\\)\\]\\}]))/,\n      '-': /^-/,\n      'pm-operator': /^(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)/,\n      'operator': /^(?:\\+|(?:[\\-=<>]|<<|>>|\\\\approx|\\$\\\\approx\\$)(?=\\s|$|-?[0-9]))/,\n      'arrowUpDown': /^(?:v|\\(v\\)|\\^|\\(\\^\\))(?=$|[\\s,;\\)\\]\\}])/,\n      '\\\\bond{(...)}': function bond(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\bond{\", \"\", \"\", \"}\");\n      },\n      '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\\u2192\\u27F6\\u21CC])/,\n      'CMT': /^[CMT](?=\\[)/,\n      '[(...)]': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"[\", \"\", \"\", \"]\");\n      },\n      '1st-level escape': /^(&|\\\\\\\\|\\\\hline)\\s*/,\n      '\\\\,': /^(?:\\\\[,\\ ;:])/,\n      // \\\\x - but output no space before\n      '\\\\x{}{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '\\\\x{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '\\\\ca': /^\\\\ca(?:\\s+|(?![a-zA-Z]))/,\n      '\\\\x': /^(?:\\\\[a-zA-Z]+\\s*|\\\\[_&{}%])/,\n      'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,\n      // only those with numbers in front, because the others will be formatted correctly anyway\n      'others': /^[\\/~|]/,\n      '\\\\frac{(...)}': function frac(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\frac{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\overset{(...)}': function overset(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\overset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\underset{(...)}': function underset(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\underset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\underbrace{(...)}': function underbrace(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\underbrace{\", \"\", \"\", \"}_\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\color{(...)}0': function color0(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\");\n      },\n      '\\\\color{(...)}{(...)}1': function color1(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\color(...){(...)}2': function color2(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color\", \"\\\\\", \"\", /^(?=\\{)/, \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\ce{(...)}': function ce(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\ce{\", \"\", \"\", \"}\");\n      },\n      'oxidation$': /^(?:[+-][IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,\n      'd-oxidation$': /^(?:[+-]?\\s?[IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,\n      // 0 could be oxidation or charge\n      'roman numeral': /^[IVX]+/,\n      '1/2$': /^[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+(?:\\$[a-z]\\$|[a-z])?$/,\n      'amount': function amount(input) {\n        var match; // e.g. 2, 0.5, 1/2, -2, n/2, +;  $a$ could be added later in parsing\n\n        match = input.match(/^(?:(?:(?:\\([+\\-]?[0-9]+\\/[0-9]+\\)|[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+|[+\\-]?[0-9]+[.,][0-9]+|[+\\-]?\\.[0-9]+|[+\\-]?[0-9]+)(?:[a-z](?=\\s*[A-Z]))?)|[+\\-]?[a-z](?=\\s*[A-Z])|\\+(?!\\s))/);\n\n        if (match) {\n          return {\n            match_: match[0],\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        var a = mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n\n        if (a) {\n          // e.g. $2n-1$, $-$\n          match = a.match_.match(/^\\$(?:\\(?[+\\-]?(?:[0-9]*[a-z]?[+\\-])?[0-9]*[a-z](?:[+\\-][0-9]*[a-z]?)?\\)?|\\+|-)\\$$/);\n\n          if (match) {\n            return {\n              match_: match[0],\n              remainder: input.substr(match[0].length)\n            };\n          }\n        }\n\n        return null;\n      },\n      'amount2': function amount2(input) {\n        return this['amount'](input);\n      },\n      '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,\n      'formula$': function formula$(input) {\n        if (input.match(/^\\([a-z]+\\)$/)) {\n          return null;\n        } // state of aggregation = no formula\n\n\n        var match = input.match(/^(?:[a-z]|(?:[0-9\\ \\+\\-\\,\\.\\(\\)]+[a-z])+[0-9\\ \\+\\-\\,\\.\\(\\)]*|(?:[a-z][0-9\\ \\+\\-\\,\\.\\(\\)]+)+[a-z]?)$/);\n\n        if (match) {\n          return {\n            match_: match[0],\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        return null;\n      },\n      'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,\n      '/': /^\\s*(\\/)\\s*/,\n      '//': /^\\s*(\\/\\/)\\s*/,\n      '*': /^\\s*[*.]\\s*/\n    },\n    findObserveGroups: function findObserveGroups(input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {\n      /** @type {{(input: string, pattern: string | RegExp): string | string[] | null;}} */\n      var _match = function _match(input, pattern) {\n        if (typeof pattern === \"string\") {\n          if (input.indexOf(pattern) !== 0) {\n            return null;\n          }\n\n          return pattern;\n        } else {\n          var match = input.match(pattern);\n\n          if (!match) {\n            return null;\n          }\n\n          return match[0];\n        }\n      };\n      /** @type {{(input: string, i: number, endChars: string | RegExp): {endMatchBegin: number, endMatchEnd: number} | null;}} */\n\n\n      var _findObserveGroups = function _findObserveGroups(input, i, endChars) {\n        var braces = 0;\n\n        while (i < input.length) {\n          var a = input.charAt(i);\n\n          var match = _match(input.substr(i), endChars);\n\n          if (match !== null && braces === 0) {\n            return {\n              endMatchBegin: i,\n              endMatchEnd: i + match.length\n            };\n          } else if (a === \"{\") {\n            braces++;\n          } else if (a === \"}\") {\n            if (braces === 0) {\n              throw [\"ExtraCloseMissingOpen\", \"Extra close brace or missing open brace\"];\n            } else {\n              braces--;\n            }\n          }\n\n          i++;\n        }\n\n        if (braces > 0) {\n          return null;\n        }\n\n        return null;\n      };\n\n      var match = _match(input, begExcl);\n\n      if (match === null) {\n        return null;\n      }\n\n      input = input.substr(match.length);\n      match = _match(input, begIncl);\n\n      if (match === null) {\n        return null;\n      }\n\n      var e = _findObserveGroups(input, match.length, endIncl || endExcl);\n\n      if (e === null) {\n        return null;\n      }\n\n      var match1 = input.substring(0, endIncl ? e.endMatchEnd : e.endMatchBegin);\n\n      if (!(beg2Excl || beg2Incl)) {\n        return {\n          match_: match1,\n          remainder: input.substr(e.endMatchEnd)\n        };\n      } else {\n        var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);\n\n        if (group2 === null) {\n          return null;\n        }\n        /** @type {string[]} */\n\n\n        var matchRet = [match1, group2.match_];\n        return {\n          match_: combine ? matchRet.join(\"\") : matchRet,\n          remainder: group2.remainder\n        };\n      }\n    },\n    //\n    // Matching function\n    // e.g. match(\"a\", input) will look for the regexp called \"a\" and see if it matches\n    // returns null or {match_:\"a\", remainder:\"bc\"}\n    //\n    match_: function match_(m, input) {\n      var pattern = mhchemParser.patterns.patterns[m];\n\n      if (pattern === undefined) {\n        throw [\"MhchemBugP\", \"mhchem bug P. Please report. (\" + m + \")\"]; // Trying to use non-existing pattern\n      } else if (typeof pattern === \"function\") {\n        return mhchemParser.patterns.patterns[m](input); // cannot use cached var pattern here, because some pattern functions need this===mhchemParser\n      } else {\n        // RegExp\n        var match = input.match(pattern);\n\n        if (match) {\n          var mm;\n\n          if (match[2]) {\n            mm = [match[1], match[2]];\n          } else if (match[1]) {\n            mm = match[1];\n          } else {\n            mm = match[0];\n          }\n\n          return {\n            match_: mm,\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        return null;\n      }\n    }\n  },\n  //\n  // Generic state machine actions\n  //\n  actions: {\n    'a=': function a(buffer, m) {\n      buffer.a = (buffer.a || \"\") + m;\n    },\n    'b=': function b(buffer, m) {\n      buffer.b = (buffer.b || \"\") + m;\n    },\n    'p=': function p(buffer, m) {\n      buffer.p = (buffer.p || \"\") + m;\n    },\n    'o=': function o(buffer, m) {\n      buffer.o = (buffer.o || \"\") + m;\n    },\n    'q=': function q(buffer, m) {\n      buffer.q = (buffer.q || \"\") + m;\n    },\n    'd=': function d(buffer, m) {\n      buffer.d = (buffer.d || \"\") + m;\n    },\n    'rm=': function rm(buffer, m) {\n      buffer.rm = (buffer.rm || \"\") + m;\n    },\n    'text=': function text(buffer, m) {\n      buffer.text_ = (buffer.text_ || \"\") + m;\n    },\n    'insert': function insert(buffer, m, a) {\n      return {\n        type_: a\n      };\n    },\n    'insert+p1': function insertP1(buffer, m, a) {\n      return {\n        type_: a,\n        p1: m\n      };\n    },\n    'insert+p1+p2': function insertP1P2(buffer, m, a) {\n      return {\n        type_: a,\n        p1: m[0],\n        p2: m[1]\n      };\n    },\n    'copy': function copy(buffer, m) {\n      return m;\n    },\n    'rm': function rm(buffer, m) {\n      return {\n        type_: 'rm',\n        p1: m || \"\"\n      };\n    },\n    'text': function text(buffer, m) {\n      return mhchemParser.go(m, 'text');\n    },\n    '{text}': function text(buffer, m) {\n      var ret = [\"{\"];\n      mhchemParser.concatArray(ret, mhchemParser.go(m, 'text'));\n      ret.push(\"}\");\n      return ret;\n    },\n    'tex-math': function texMath(buffer, m) {\n      return mhchemParser.go(m, 'tex-math');\n    },\n    'tex-math tight': function texMathTight(buffer, m) {\n      return mhchemParser.go(m, 'tex-math tight');\n    },\n    'bond': function bond(buffer, m, k) {\n      return {\n        type_: 'bond',\n        kind_: k || m\n      };\n    },\n    'color0-output': function color0Output(buffer, m) {\n      return {\n        type_: 'color0',\n        color: m[0]\n      };\n    },\n    'ce': function ce(buffer, m) {\n      return mhchemParser.go(m);\n    },\n    '1/2': function _(buffer, m) {\n      /** @type {ParserOutput[]} */\n      var ret = [];\n\n      if (m.match(/^[+\\-]/)) {\n        ret.push(m.substr(0, 1));\n        m = m.substr(1);\n      }\n\n      var n = m.match(/^([0-9]+|\\$[a-z]\\$|[a-z])\\/([0-9]+)(\\$[a-z]\\$|[a-z])?$/);\n      n[1] = n[1].replace(/\\$/g, \"\");\n      ret.push({\n        type_: 'frac',\n        p1: n[1],\n        p2: n[2]\n      });\n\n      if (n[3]) {\n        n[3] = n[3].replace(/\\$/g, \"\");\n        ret.push({\n          type_: 'tex-math',\n          p1: n[3]\n        });\n      }\n\n      return ret;\n    },\n    '9,9': function _(buffer, m) {\n      return mhchemParser.go(m, '9,9');\n    }\n  },\n  //\n  // createTransitions\n  // convert  { 'letter': { 'state': { action_: 'output' } } }  to  { 'state' => [ { pattern: 'letter', task: { action_: [{type_: 'output'}] } } ] }\n  // with expansion of 'a|b' to 'a' and 'b' (at 2 places)\n  //\n  createTransitions: function createTransitions(o) {\n    var pattern, state;\n    /** @type {string[]} */\n\n    var stateArray;\n    var i; //\n    // 1. Collect all states\n    //\n\n    /** @type {Transitions} */\n\n    var transitions = {};\n\n    for (pattern in o) {\n      for (state in o[pattern]) {\n        stateArray = state.split(\"|\");\n        o[pattern][state].stateArray = stateArray;\n\n        for (i = 0; i < stateArray.length; i++) {\n          transitions[stateArray[i]] = [];\n        }\n      }\n    } //\n    // 2. Fill states\n    //\n\n\n    for (pattern in o) {\n      for (state in o[pattern]) {\n        stateArray = o[pattern][state].stateArray || [];\n\n        for (i = 0; i < stateArray.length; i++) {\n          //\n          // 2a. Normalize actions into array:  'text=' ==> [{type_:'text='}]\n          // (Note to myself: Resolving the function here would be problematic. It would need .bind (for *this*) and currying (for *option*).)\n          //\n\n          /** @type {any} */\n          var p = o[pattern][state];\n\n          if (p.action_) {\n            p.action_ = [].concat(p.action_);\n\n            for (var k = 0; k < p.action_.length; k++) {\n              if (typeof p.action_[k] === \"string\") {\n                p.action_[k] = {\n                  type_: p.action_[k]\n                };\n              }\n            }\n          } else {\n            p.action_ = [];\n          } //\n          // 2.b Multi-insert\n          //\n\n\n          var patternArray = pattern.split(\"|\");\n\n          for (var j = 0; j < patternArray.length; j++) {\n            if (stateArray[i] === '*') {\n              // insert into all\n              for (var t in transitions) {\n                transitions[t].push({\n                  pattern: patternArray[j],\n                  task: p\n                });\n              }\n            } else {\n              transitions[stateArray[i]].push({\n                pattern: patternArray[j],\n                task: p\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return transitions;\n  },\n  stateMachines: {}\n}; //\n// Definition of state machines\n//\n\nmhchemParser.stateMachines = {\n  //\n  // \\ce state machines\n  //\n  //#region ce\n  'ce': {\n    // main parser\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      'else': {\n        '0|1|2': {\n          action_: 'beginsWithBond=false',\n          revisit: true,\n          toContinue: true\n        }\n      },\n      'oxidation$': {\n        '0': {\n          action_: 'oxidation-output'\n        }\n      },\n      'CMT': {\n        'r': {\n          action_: 'rdt=',\n          nextState: 'rt'\n        },\n        'rd': {\n          action_: 'rqt=',\n          nextState: 'rdt'\n        }\n      },\n      'arrowUpDown': {\n        '0|1|2|as': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '1'\n        }\n      },\n      'uprightEntities': {\n        '0|1|2': {\n          action_: ['o=', 'output'],\n          nextState: '1'\n        }\n      },\n      'orbital': {\n        '0|1|2|3': {\n          action_: 'o=',\n          nextState: 'o'\n        }\n      },\n      '->': {\n        '0|1|2|3': {\n          action_: 'r=',\n          nextState: 'r'\n        },\n        'a|as': {\n          action_: ['output', 'r='],\n          nextState: 'r'\n        },\n        '*': {\n          action_: ['output', 'r='],\n          nextState: 'r'\n        }\n      },\n      '+': {\n        'o': {\n          action_: 'd= kv',\n          nextState: 'd'\n        },\n        'd|D': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qd|qD': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'dq': {\n          action_: ['output', 'd='],\n          nextState: 'd'\n        },\n        '3': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '0'\n        }\n      },\n      'amount': {\n        '0|2': {\n          action_: 'a=',\n          nextState: 'a'\n        }\n      },\n      'pm-operator': {\n        '0|1|2|a|as': {\n          action_: ['sb=false', 'output', {\n            type_: 'operator',\n            option: '\\\\pm'\n          }],\n          nextState: '0'\n        }\n      },\n      'operator': {\n        '0|1|2|a|as': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '0'\n        }\n      },\n      '-$': {\n        'o|q': {\n          action_: ['charge or bond', 'output'],\n          nextState: 'qd'\n        },\n        'd': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'D': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qd': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qD|dq': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        }\n      },\n      '-9': {\n        '3|o': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '3'\n        }\n      },\n      '- orbital overlap': {\n        'o': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        },\n        'd': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        }\n      },\n      '-': {\n        '0|1|2': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'beginsWithBond=true', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        '3': {\n          action_: {\n            type_: 'bond',\n            option: \"-\"\n          }\n        },\n        'a': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        },\n        'as': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        'b': {\n          action_: 'b='\n        },\n        'o': {\n          action_: {\n            type_: '- after o/d',\n            option: false\n          },\n          nextState: '2'\n        },\n        'q': {\n          action_: {\n            type_: '- after o/d',\n            option: false\n          },\n          nextState: '2'\n        },\n        'd|qd|dq': {\n          action_: {\n            type_: '- after o/d',\n            option: true\n          },\n          nextState: '2'\n        },\n        'D|qD|p': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        }\n      },\n      'amount2': {\n        '1|3': {\n          action_: 'a=',\n          nextState: 'a'\n        }\n      },\n      'letters': {\n        '0|1|2|3|a|as|b|p|bp|o': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        'q|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        },\n        'd|D|qd|qD': {\n          action_: 'o after d',\n          nextState: 'o'\n        }\n      },\n      'digits': {\n        'o': {\n          action_: 'q=',\n          nextState: 'q'\n        },\n        'd|D': {\n          action_: 'q=',\n          nextState: 'dq'\n        },\n        'q': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        },\n        'a': {\n          action_: 'o=',\n          nextState: 'o'\n        }\n      },\n      'space A': {\n        'b|p|bp': {}\n      },\n      'space': {\n        'a': {\n          nextState: 'as'\n        },\n        '0': {\n          action_: 'sb=false'\n        },\n        '1|2': {\n          action_: 'sb=true'\n        },\n        'r|rt|rd|rdt|rdq': {\n          action_: 'output',\n          nextState: '0'\n        },\n        '*': {\n          action_: ['output', 'sb=true'],\n          nextState: '1'\n        }\n      },\n      '1st-level escape': {\n        '1|2': {\n          action_: ['output', {\n            type_: 'insert+p1',\n            option: '1st-level escape'\n          }]\n        },\n        '*': {\n          action_: ['output', {\n            type_: 'insert+p1',\n            option: '1st-level escape'\n          }],\n          nextState: '0'\n        }\n      },\n      '[(...)]': {\n        'r|rt': {\n          action_: 'rd=',\n          nextState: 'rd'\n        },\n        'rd|rdt': {\n          action_: 'rq=',\n          nextState: 'rdq'\n        }\n      },\n      '...': {\n        'o|d|D|dq|qd|qD': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"...\"\n          }],\n          nextState: '3'\n        },\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, {\n            type_: 'insert',\n            option: 'ellipsis'\n          }],\n          nextState: '1'\n        }\n      },\n      '. |* ': {\n        '*': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'addition compound'\n          }],\n          nextState: '1'\n        }\n      },\n      'state of aggregation $': {\n        '*': {\n          action_: ['output', 'state of aggregation'],\n          nextState: '1'\n        }\n      },\n      '{[(': {\n        'a|as|o': {\n          action_: ['o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        },\n        '0|1|2|3': {\n          action_: ['o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        },\n        '*': {\n          action_: ['output', 'o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        }\n      },\n      ')]}': {\n        '0|1|2|3|b|p|bp|o': {\n          action_: ['o=', 'parenthesisLevel--'],\n          nextState: 'o'\n        },\n        'a|as|d|D|q|qd|qD|dq': {\n          action_: ['output', 'o=', 'parenthesisLevel--'],\n          nextState: 'o'\n        }\n      },\n      ', ': {\n        '*': {\n          action_: ['output', 'comma'],\n          nextState: '0'\n        }\n      },\n      '^_': {\n        // ^ and _ without a sensible argument\n        '*': {}\n      },\n      '^{(...)}|^($...$)': {\n        '0|1|2|as': {\n          action_: 'b=',\n          nextState: 'b'\n        },\n        'p': {\n          action_: 'b=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'd= kv',\n          nextState: 'D'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qD'\n        },\n        'd|D|qd|qD|dq': {\n          action_: ['output', 'd='],\n          nextState: 'D'\n        }\n      },\n      '^a|^\\\\x{}{}|^\\\\x{}|^\\\\x|\\'': {\n        '0|1|2|as': {\n          action_: 'b=',\n          nextState: 'b'\n        },\n        'p': {\n          action_: 'b=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'd= kv',\n          nextState: 'd'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'd|qd|D|qD': {\n          action_: 'd='\n        },\n        'dq': {\n          action_: ['output', 'd='],\n          nextState: 'd'\n        }\n      },\n      '_{(state of aggregation)}$': {\n        'd|D|q|qd|qD|dq': {\n          action_: ['output', 'q='],\n          nextState: 'q'\n        }\n      },\n      '_{(...)}|_($...$)|_9|_\\\\x{}{}|_\\\\x{}|_\\\\x': {\n        '0|1|2|as': {\n          action_: 'p=',\n          nextState: 'p'\n        },\n        'b': {\n          action_: 'p=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'q=',\n          nextState: 'q'\n        },\n        'd|D': {\n          action_: 'q=',\n          nextState: 'dq'\n        },\n        'q|qd|qD|dq': {\n          action_: ['output', 'q='],\n          nextState: 'q'\n        }\n      },\n      '=<>': {\n        '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'bond'],\n          nextState: '3'\n        }\n      },\n      '#': {\n        '0|1|2|3|a|as|o': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, {\n            type_: 'bond',\n            option: \"#\"\n          }],\n          nextState: '3'\n        }\n      },\n      '{}': {\n        '*': {\n          action_: {\n            type_: 'output',\n            option: 1\n          },\n          nextState: '1'\n        }\n      },\n      '{...}': {\n        '0|1|2|3|a|as|b|p|bp': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        'o|d|D|q|qd|qD|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        }\n      },\n      '$...$': {\n        'a': {\n          action_: 'a='\n        },\n        // 2$n$\n        '0|1|2|3|as|b|p|bp|o': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        // not 'amount'\n        'as|o': {\n          action_: 'o='\n        },\n        'q|d|D|qd|qD|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        }\n      },\n      '\\\\bond{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'bond'],\n          nextState: \"3\"\n        }\n      },\n      '\\\\frac{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'frac-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\overset{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'overset-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\underset{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'underset-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\underbrace{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'underbrace-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'color-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'color0-output']\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'ce'],\n          nextState: '3'\n        }\n      },\n      '\\\\,': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'copy'],\n          nextState: '1'\n        }\n      },\n      '\\\\x{}{}|\\\\x{}|\\\\x': {\n        '0|1|2|3|a|as|b|p|bp|o|c0': {\n          action_: ['o=', 'output'],\n          nextState: '3'\n        },\n        '*': {\n          action_: ['output', 'o=', 'output'],\n          nextState: '3'\n        }\n      },\n      'others': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'copy'],\n          nextState: '3'\n        }\n      },\n      'else2': {\n        'a': {\n          action_: 'a to o',\n          nextState: 'o',\n          revisit: true\n        },\n        'as': {\n          action_: ['output', 'sb=true'],\n          nextState: '1',\n          revisit: true\n        },\n        'r|rt|rd|rdt|rdq': {\n          action_: ['output'],\n          nextState: '0',\n          revisit: true\n        },\n        '*': {\n          action_: ['output', 'copy'],\n          nextState: '3'\n        }\n      }\n    }),\n    actions: {\n      'o after d': function oAfterD(buffer, m) {\n        var ret;\n\n        if ((buffer.d || \"\").match(/^[0-9]+$/)) {\n          var tmp = buffer.d;\n          buffer.d = undefined;\n          ret = this['output'](buffer);\n          buffer.b = tmp;\n        } else {\n          ret = this['output'](buffer);\n        }\n\n        mhchemParser.actions['o='](buffer, m);\n        return ret;\n      },\n      'd= kv': function dKv(buffer, m) {\n        buffer.d = m;\n        buffer.dType = 'kv';\n      },\n      'charge or bond': function chargeOrBond(buffer, m) {\n        if (buffer['beginsWithBond']) {\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          mhchemParser.concatArray(ret, this['output'](buffer));\n          mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n          return ret;\n        } else {\n          buffer.d = m;\n        }\n      },\n      '- after o/d': function afterOD(buffer, m, isAfterD) {\n        var c1 = mhchemParser.patterns.match_('orbital', buffer.o || \"\");\n        var c2 = mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || \"\");\n        var c3 = mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || \"\");\n        var c4 = mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || \"\");\n        var hyphenFollows = m === \"-\" && (c1 && c1.remainder === \"\" || c2 || c3 || c4);\n\n        if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {\n          buffer.o = '$' + buffer.o + '$';\n        }\n        /** @type {ParserOutput[]} */\n\n\n        var ret = [];\n\n        if (hyphenFollows) {\n          mhchemParser.concatArray(ret, this['output'](buffer));\n          ret.push({\n            type_: 'hyphen'\n          });\n        } else {\n          c1 = mhchemParser.patterns.match_('digits', buffer.d || \"\");\n\n          if (isAfterD && c1 && c1.remainder === '') {\n            mhchemParser.concatArray(ret, mhchemParser.actions['d='](buffer, m));\n            mhchemParser.concatArray(ret, this['output'](buffer));\n          } else {\n            mhchemParser.concatArray(ret, this['output'](buffer));\n            mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n          }\n        }\n\n        return ret;\n      },\n      'a to o': function aToO(buffer) {\n        buffer.o = buffer.a;\n        buffer.a = undefined;\n      },\n      'sb=true': function sbTrue(buffer) {\n        buffer.sb = true;\n      },\n      'sb=false': function sbFalse(buffer) {\n        buffer.sb = false;\n      },\n      'beginsWithBond=true': function beginsWithBondTrue(buffer) {\n        buffer['beginsWithBond'] = true;\n      },\n      'beginsWithBond=false': function beginsWithBondFalse(buffer) {\n        buffer['beginsWithBond'] = false;\n      },\n      'parenthesisLevel++': function parenthesisLevel(buffer) {\n        buffer['parenthesisLevel']++;\n      },\n      'parenthesisLevel--': function parenthesisLevel(buffer) {\n        buffer['parenthesisLevel']--;\n      },\n      'state of aggregation': function stateOfAggregation(buffer, m) {\n        return {\n          type_: 'state of aggregation',\n          p1: mhchemParser.go(m, 'o')\n        };\n      },\n      'comma': function comma(buffer, m) {\n        var a = m.replace(/\\s*$/, '');\n        var withSpace = a !== m;\n\n        if (withSpace && buffer['parenthesisLevel'] === 0) {\n          return {\n            type_: 'comma enumeration L',\n            p1: a\n          };\n        } else {\n          return {\n            type_: 'comma enumeration M',\n            p1: a\n          };\n        }\n      },\n      'output': function output(buffer, m, entityFollows) {\n        // entityFollows:\n        //   undefined = if we have nothing else to output, also ignore the just read space (buffer.sb)\n        //   1 = an entity follows, never omit the space if there was one just read before (can only apply to state 1)\n        //   2 = 1 + the entity can have an amount, so output a\\, instead of converting it to o (can only apply to states a|as)\n\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret;\n\n        if (!buffer.r) {\n          ret = [];\n\n          if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) ; else {\n            if (buffer.sb) {\n              ret.push({\n                type_: 'entitySkip'\n              });\n            }\n\n            if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows !== 2) {\n              buffer.o = buffer.a;\n              buffer.a = undefined;\n            } else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {\n              buffer.o = buffer.a;\n              buffer.d = buffer.b;\n              buffer.q = buffer.p;\n              buffer.a = buffer.b = buffer.p = undefined;\n            } else {\n              if (buffer.o && buffer.dType === 'kv' && mhchemParser.patterns.match_('d-oxidation$', buffer.d || \"\")) {\n                buffer.dType = 'oxidation';\n              } else if (buffer.o && buffer.dType === 'kv' && !buffer.q) {\n                buffer.dType = undefined;\n              }\n            }\n\n            ret.push({\n              type_: 'chemfive',\n              a: mhchemParser.go(buffer.a, 'a'),\n              b: mhchemParser.go(buffer.b, 'bd'),\n              p: mhchemParser.go(buffer.p, 'pq'),\n              o: mhchemParser.go(buffer.o, 'o'),\n              q: mhchemParser.go(buffer.q, 'pq'),\n              d: mhchemParser.go(buffer.d, buffer.dType === 'oxidation' ? 'oxidation' : 'bd'),\n              dType: buffer.dType\n            });\n          }\n        } else {\n          // r\n\n          /** @type {ParserOutput[]} */\n          var rd;\n\n          if (buffer.rdt === 'M') {\n            rd = mhchemParser.go(buffer.rd, 'tex-math');\n          } else if (buffer.rdt === 'T') {\n            rd = [{\n              type_: 'text',\n              p1: buffer.rd || \"\"\n            }];\n          } else {\n            rd = mhchemParser.go(buffer.rd);\n          }\n          /** @type {ParserOutput[]} */\n\n\n          var rq;\n\n          if (buffer.rqt === 'M') {\n            rq = mhchemParser.go(buffer.rq, 'tex-math');\n          } else if (buffer.rqt === 'T') {\n            rq = [{\n              type_: 'text',\n              p1: buffer.rq || \"\"\n            }];\n          } else {\n            rq = mhchemParser.go(buffer.rq);\n          }\n\n          ret = {\n            type_: 'arrow',\n            r: buffer.r,\n            rd: rd,\n            rq: rq\n          };\n        }\n\n        for (var p in buffer) {\n          if (p !== 'parenthesisLevel' && p !== 'beginsWithBond') {\n            delete buffer[p];\n          }\n        }\n\n        return ret;\n      },\n      'oxidation-output': function oxidationOutput(buffer, m) {\n        var ret = [\"{\"];\n        mhchemParser.concatArray(ret, mhchemParser.go(m, 'oxidation'));\n        ret.push(\"}\");\n        return ret;\n      },\n      'frac-output': function fracOutput(buffer, m) {\n        return {\n          type_: 'frac-ce',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'overset-output': function oversetOutput(buffer, m) {\n        return {\n          type_: 'overset',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'underset-output': function undersetOutput(buffer, m) {\n        return {\n          type_: 'underset',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'underbrace-output': function underbraceOutput(buffer, m) {\n        return {\n          type_: 'underbrace',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'color-output': function colorOutput(buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1])\n        };\n      },\n      'r=': function r(buffer, m) {\n        buffer.r = m;\n      },\n      'rdt=': function rdt(buffer, m) {\n        buffer.rdt = m;\n      },\n      'rd=': function rd(buffer, m) {\n        buffer.rd = m;\n      },\n      'rqt=': function rqt(buffer, m) {\n        buffer.rqt = m;\n      },\n      'rq=': function rq(buffer, m) {\n        buffer.rq = m;\n      },\n      'operator': function operator(buffer, m, p1) {\n        return {\n          type_: 'operator',\n          kind_: p1 || m\n        };\n      }\n    }\n  },\n  'a': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '1',\n          revisit: true\n        }\n      },\n      '$(...)$': {\n        '*': {\n          action_: 'tex-math tight',\n          nextState: '1'\n        }\n      },\n      ',': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'commaDecimal'\n          }\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {}\n  },\n  'o': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '1',\n          revisit: true\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '\\\\ca': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'circa'\n          }\n        }\n      },\n      '\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: '{text}'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {}\n  },\n  'text': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '{...}': {\n        '*': {\n          action_: 'text='\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '\\\\greek': {\n        '*': {\n          action_: ['output', 'rm']\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: ['output', 'copy']\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'text='\n        }\n      }\n    }),\n    actions: {\n      'output': function output(buffer) {\n        if (buffer.text_) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'text',\n            p1: buffer.text_\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  'pq': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'state of aggregation $': {\n        '*': {\n          action_: 'state of aggregation'\n        }\n      },\n      'i$': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '(KV letters),': {\n        '0': {\n          action_: 'rm',\n          nextState: '0'\n        }\n      },\n      'formula$': {\n        '0': {\n          nextState: 'f',\n          revisit: true\n        }\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: 'text'\n        }\n      },\n      'a-z': {\n        'f': {\n          action_: 'tex-math'\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '-9.,9': {\n        '*': {\n          action_: '9,9'\n        }\n      },\n      ',': {\n        '*': {\n          action_: {\n            type_: 'insert+p1',\n            option: 'comma enumeration S'\n          }\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: 'color-output'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: 'color0-output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: 'ce'\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'state of aggregation': function stateOfAggregation(buffer, m) {\n        return {\n          type_: 'state of aggregation subscript',\n          p1: mhchemParser.go(m, 'o')\n        };\n      },\n      'color-output': function colorOutput(buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1], 'pq')\n        };\n      }\n    }\n  },\n  'bd': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'x$': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      'formula$': {\n        '0': {\n          nextState: 'f',\n          revisit: true\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '-9.,9 no missing 0': {\n        '*': {\n          action_: '9,9'\n        }\n      },\n      '.': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'electron dot'\n          }\n        }\n      },\n      'a-z': {\n        'f': {\n          action_: 'tex-math'\n        }\n      },\n      'x': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'KV x'\n          }\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '\\'': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'prime'\n          }\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: 'text'\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: 'color-output'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: 'color0-output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: 'ce'\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'color-output': function colorOutput(buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1], 'bd')\n        };\n      }\n    }\n  },\n  'oxidation': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'roman numeral': {\n        '*': {\n          action_: 'roman-numeral'\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'roman-numeral': function romanNumeral(buffer, m) {\n        return {\n          type_: 'roman numeral',\n          p1: m || \"\"\n        };\n      }\n    }\n  },\n  'tex-math': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: ['output', 'ce']\n        }\n      },\n      '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'o='\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'o='\n        }\n      }\n    }),\n    actions: {\n      'output': function output(buffer) {\n        if (buffer.o) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'tex-math',\n            p1: buffer.o\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  'tex-math tight': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: ['output', 'ce']\n        }\n      },\n      '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'o='\n        }\n      },\n      '-|+': {\n        '*': {\n          action_: 'tight operator'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'o='\n        }\n      }\n    }),\n    actions: {\n      'tight operator': function tightOperator(buffer, m) {\n        buffer.o = (buffer.o || \"\") + \"{\" + m + \"}\";\n      },\n      'output': function output(buffer) {\n        if (buffer.o) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'tex-math',\n            p1: buffer.o\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  '9,9': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      ',': {\n        '*': {\n          action_: 'comma'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'comma': function comma() {\n        return {\n          type_: 'commaDecimal'\n        };\n      }\n    }\n  },\n  //#endregion\n  //\n  // \\pu state machines\n  //\n  //#region pu\n  'pu': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      'space$': {\n        '*': {\n          action_: ['output', 'space']\n        }\n      },\n      '{[(|)]}': {\n        '0|a': {\n          action_: 'copy'\n        }\n      },\n      '(-)(9)^(-9)': {\n        '0': {\n          action_: 'number^',\n          nextState: 'a'\n        }\n      },\n      '(-)(9.,9)(e)(99)': {\n        '0': {\n          action_: 'enumber',\n          nextState: 'a'\n        }\n      },\n      'space': {\n        '0|a': {}\n      },\n      'pm-operator': {\n        '0|a': {\n          action_: {\n            type_: 'operator',\n            option: '\\\\pm'\n          },\n          nextState: '0'\n        }\n      },\n      'operator': {\n        '0|a': {\n          action_: 'copy',\n          nextState: '0'\n        }\n      },\n      '//': {\n        'd': {\n          action_: 'o=',\n          nextState: '/'\n        }\n      },\n      '/': {\n        'd': {\n          action_: 'o=',\n          nextState: '/'\n        }\n      },\n      '{...}|else': {\n        '0|d': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'a': {\n          action_: ['space', 'd='],\n          nextState: 'd'\n        },\n        '/|q': {\n          action_: 'q=',\n          nextState: 'q'\n        }\n      }\n    }),\n    actions: {\n      'enumber': function enumber(buffer, m) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n\n        if (m[0] === \"+-\" || m[0] === \"+/-\") {\n          ret.push(\"\\\\pm \");\n        } else if (m[0]) {\n          ret.push(m[0]);\n        }\n\n        if (m[1]) {\n          mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n\n          if (m[2]) {\n            if (m[2].match(/[,.]/)) {\n              mhchemParser.concatArray(ret, mhchemParser.go(m[2], 'pu-9,9'));\n            } else {\n              ret.push(m[2]);\n            }\n          }\n\n          m[3] = m[4] || m[3];\n\n          if (m[3]) {\n            m[3] = m[3].trim();\n\n            if (m[3] === \"e\" || m[3].substr(0, 1) === \"*\") {\n              ret.push({\n                type_: 'cdot'\n              });\n            } else {\n              ret.push({\n                type_: 'times'\n              });\n            }\n          }\n        }\n\n        if (m[3]) {\n          ret.push(\"10^{\" + m[5] + \"}\");\n        }\n\n        return ret;\n      },\n      'number^': function number(buffer, m) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n\n        if (m[0] === \"+-\" || m[0] === \"+/-\") {\n          ret.push(\"\\\\pm \");\n        } else if (m[0]) {\n          ret.push(m[0]);\n        }\n\n        mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n        ret.push(\"^{\" + m[2] + \"}\");\n        return ret;\n      },\n      'operator': function operator(buffer, m, p1) {\n        return {\n          type_: 'operator',\n          kind_: p1 || m\n        };\n      },\n      'space': function space() {\n        return {\n          type_: 'pu-space-1'\n        };\n      },\n      'output': function output(buffer) {\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret;\n        var md = mhchemParser.patterns.match_('{(...)}', buffer.d || \"\");\n\n        if (md && md.remainder === '') {\n          buffer.d = md.match_;\n        }\n\n        var mq = mhchemParser.patterns.match_('{(...)}', buffer.q || \"\");\n\n        if (mq && mq.remainder === '') {\n          buffer.q = mq.match_;\n        }\n\n        if (buffer.d) {\n          buffer.d = buffer.d.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n          buffer.d = buffer.d.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n        }\n\n        if (buffer.q) {\n          // fraction\n          buffer.q = buffer.q.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n          buffer.q = buffer.q.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n          var b5 = {\n            d: mhchemParser.go(buffer.d, 'pu'),\n            q: mhchemParser.go(buffer.q, 'pu')\n          };\n\n          if (buffer.o === '//') {\n            ret = {\n              type_: 'pu-frac',\n              p1: b5.d,\n              p2: b5.q\n            };\n          } else {\n            ret = b5.d;\n\n            if (b5.d.length > 1 || b5.q.length > 1) {\n              ret.push({\n                type_: ' / '\n              });\n            } else {\n              ret.push({\n                type_: '/'\n              });\n            }\n\n            mhchemParser.concatArray(ret, b5.q);\n          }\n        } else {\n          // no fraction\n          ret = mhchemParser.go(buffer.d, 'pu-2');\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  },\n  'pu-2': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '*': {\n        '*': {\n          action_: ['output', 'cdot'],\n          nextState: '0'\n        }\n      },\n      '\\\\x': {\n        '*': {\n          action_: 'rm='\n        }\n      },\n      'space': {\n        '*': {\n          action_: ['output', 'space'],\n          nextState: '0'\n        }\n      },\n      '^{(...)}|^(-1)': {\n        '1': {\n          action_: '^(-1)'\n        }\n      },\n      '-9.,9': {\n        '0': {\n          action_: 'rm=',\n          nextState: '0'\n        },\n        '1': {\n          action_: '^(-1)',\n          nextState: '0'\n        }\n      },\n      '{...}|else': {\n        '*': {\n          action_: 'rm=',\n          nextState: '1'\n        }\n      }\n    }),\n    actions: {\n      'cdot': function cdot() {\n        return {\n          type_: 'tight cdot'\n        };\n      },\n      '^(-1)': function _(buffer, m) {\n        buffer.rm += \"^{\" + m + \"}\";\n      },\n      'space': function space() {\n        return {\n          type_: 'pu-space-2'\n        };\n      },\n      'output': function output(buffer) {\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret = [];\n\n        if (buffer.rm) {\n          var mrm = mhchemParser.patterns.match_('{(...)}', buffer.rm || \"\");\n\n          if (mrm && mrm.remainder === '') {\n            ret = mhchemParser.go(mrm.match_, 'pu');\n          } else {\n            ret = {\n              type_: 'rm',\n              p1: buffer.rm\n            };\n          }\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  },\n  'pu-9,9': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '0': {\n          action_: 'output-0'\n        },\n        'o': {\n          action_: 'output-o'\n        }\n      },\n      ',': {\n        '0': {\n          action_: ['output-0', 'comma'],\n          nextState: 'o'\n        }\n      },\n      '.': {\n        '0': {\n          action_: ['output-0', 'copy'],\n          nextState: 'o'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'text='\n        }\n      }\n    }),\n    actions: {\n      'comma': function comma() {\n        return {\n          type_: 'commaDecimal'\n        };\n      },\n      'output-0': function output0(buffer) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n        buffer.text_ = buffer.text_ || \"\";\n\n        if (buffer.text_.length > 4) {\n          var a = buffer.text_.length % 3;\n\n          if (a === 0) {\n            a = 3;\n          }\n\n          for (var i = buffer.text_.length - 3; i > 0; i -= 3) {\n            ret.push(buffer.text_.substr(i, 3));\n            ret.push({\n              type_: '1000 separator'\n            });\n          }\n\n          ret.push(buffer.text_.substr(0, a));\n          ret.reverse();\n        } else {\n          ret.push(buffer.text_);\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      },\n      'output-o': function outputO(buffer) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n        buffer.text_ = buffer.text_ || \"\";\n\n        if (buffer.text_.length > 4) {\n          var a = buffer.text_.length - 3;\n\n          for (var i = 0; i < a; i += 3) {\n            ret.push(buffer.text_.substr(i, 3));\n            ret.push({\n              type_: '1000 separator'\n            });\n          }\n\n          ret.push(buffer.text_.substr(i));\n        } else {\n          ret.push(buffer.text_);\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  } //#endregion\n\n}; //\n// texify: Take MhchemParser output and convert it to TeX\n//\n\n/** @type {Texify} */\n\nvar texify = {\n  go: function go(input, isInner) {\n    // (recursive, max 4 levels)\n    if (!input) {\n      return \"\";\n    }\n\n    var res = \"\";\n    var cee = false;\n\n    for (var i = 0; i < input.length; i++) {\n      var inputi = input[i];\n\n      if (typeof inputi === \"string\") {\n        res += inputi;\n      } else {\n        res += texify._go2(inputi);\n\n        if (inputi.type_ === '1st-level escape') {\n          cee = true;\n        }\n      }\n    }\n\n    if (!isInner && !cee && res) {\n      res = \"{\" + res + \"}\";\n    }\n\n    return res;\n  },\n  _goInner: function _goInner(input) {\n    if (!input) {\n      return input;\n    }\n\n    return texify.go(input, true);\n  },\n  _go2: function _go2(buf) {\n    /** @type {undefined | string} */\n    var res;\n\n    switch (buf.type_) {\n      case 'chemfive':\n        res = \"\";\n        var b5 = {\n          a: texify._goInner(buf.a),\n          b: texify._goInner(buf.b),\n          p: texify._goInner(buf.p),\n          o: texify._goInner(buf.o),\n          q: texify._goInner(buf.q),\n          d: texify._goInner(buf.d)\n        }; //\n        // a\n        //\n\n        if (b5.a) {\n          if (b5.a.match(/^[+\\-]/)) {\n            b5.a = \"{\" + b5.a + \"}\";\n          }\n\n          res += b5.a + \"\\\\,\";\n        } //\n        // b and p\n        //\n\n\n        if (b5.b || b5.p) {\n          res += \"{\\\\vphantom{X}}\";\n          res += \"^{\\\\hphantom{\" + (b5.b || \"\") + \"}}_{\\\\hphantom{\" + (b5.p || \"\") + \"}}\";\n          res += \"{\\\\vphantom{X}}\";\n          res += \"^{\\\\smash[t]{\\\\vphantom{2}}\\\\mathllap{\" + (b5.b || \"\") + \"}}\";\n          res += \"_{\\\\vphantom{2}\\\\mathllap{\\\\smash[t]{\" + (b5.p || \"\") + \"}}}\";\n        } //\n        // o\n        //\n\n\n        if (b5.o) {\n          if (b5.o.match(/^[+\\-]/)) {\n            b5.o = \"{\" + b5.o + \"}\";\n          }\n\n          res += b5.o;\n        } //\n        // q and d\n        //\n\n\n        if (buf.dType === 'kv') {\n          if (b5.d || b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n          }\n\n          if (b5.d) {\n            res += \"^{\" + b5.d + \"}\";\n          }\n\n          if (b5.q) {\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n        } else if (buf.dType === 'oxidation') {\n          if (b5.d) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\" + b5.d + \"}\";\n          }\n\n          if (b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n        } else {\n          if (b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n\n          if (b5.d) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\" + b5.d + \"}\";\n          }\n        }\n\n        break;\n\n      case 'rm':\n        res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        break;\n\n      case 'text':\n        if (buf.p1.match(/[\\^_]/)) {\n          buf.p1 = buf.p1.replace(\" \", \"~\").replace(\"-\", \"\\\\text{-}\");\n          res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        } else {\n          res = \"\\\\text{\" + buf.p1 + \"}\";\n        }\n\n        break;\n\n      case 'roman numeral':\n        res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        break;\n\n      case 'state of aggregation':\n        res = \"\\\\mskip2mu \" + texify._goInner(buf.p1);\n        break;\n\n      case 'state of aggregation subscript':\n        res = \"\\\\mskip1mu \" + texify._goInner(buf.p1);\n        break;\n\n      case 'bond':\n        res = texify._getBond(buf.kind_);\n\n        if (!res) {\n          throw [\"MhchemErrorBond\", \"mhchem Error. Unknown bond type (\" + buf.kind_ + \")\"];\n        }\n\n        break;\n\n      case 'frac':\n        var c = \"\\\\frac{\" + buf.p1 + \"}{\" + buf.p2 + \"}\";\n        res = \"\\\\mathchoice{\\\\textstyle\" + c + \"}{\" + c + \"}{\" + c + \"}{\" + c + \"}\";\n        break;\n\n      case 'pu-frac':\n        var d = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        res = \"\\\\mathchoice{\\\\textstyle\" + d + \"}{\" + d + \"}{\" + d + \"}{\" + d + \"}\";\n        break;\n\n      case 'tex-math':\n        res = buf.p1 + \" \";\n        break;\n\n      case 'frac-ce':\n        res = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'overset':\n        res = \"\\\\overset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'underset':\n        res = \"\\\\underset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'underbrace':\n        res = \"\\\\underbrace{\" + texify._goInner(buf.p1) + \"}_{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'color':\n        res = \"{\\\\color{\" + buf.color1 + \"}{\" + texify._goInner(buf.color2) + \"}}\";\n        break;\n\n      case 'color0':\n        res = \"\\\\color{\" + buf.color + \"}\";\n        break;\n\n      case 'arrow':\n        var b6 = {\n          rd: texify._goInner(buf.rd),\n          rq: texify._goInner(buf.rq)\n        };\n\n        var arrow = \"\\\\x\" + texify._getArrow(buf.r);\n\n        if (b6.rq) {\n          arrow += \"[{\" + b6.rq + \"}]\";\n        }\n\n        if (b6.rd) {\n          arrow += \"{\" + b6.rd + \"}\";\n        } else {\n          arrow += \"{}\";\n        }\n\n        res = arrow;\n        break;\n\n      case 'operator':\n        res = texify._getOperator(buf.kind_);\n        break;\n\n      case '1st-level escape':\n        res = buf.p1 + \" \"; // &, \\\\\\\\, \\\\hlin\n\n        break;\n\n      case 'space':\n        res = \" \";\n        break;\n\n      case 'entitySkip':\n        res = \"~\";\n        break;\n\n      case 'pu-space-1':\n        res = \"~\";\n        break;\n\n      case 'pu-space-2':\n        res = \"\\\\mkern3mu \";\n        break;\n\n      case '1000 separator':\n        res = \"\\\\mkern2mu \";\n        break;\n\n      case 'commaDecimal':\n        res = \"{,}\";\n        break;\n\n      case 'comma enumeration L':\n        res = \"{\" + buf.p1 + \"}\\\\mkern6mu \";\n        break;\n\n      case 'comma enumeration M':\n        res = \"{\" + buf.p1 + \"}\\\\mkern3mu \";\n        break;\n\n      case 'comma enumeration S':\n        res = \"{\" + buf.p1 + \"}\\\\mkern1mu \";\n        break;\n\n      case 'hyphen':\n        res = \"\\\\text{-}\";\n        break;\n\n      case 'addition compound':\n        res = \"\\\\,{\\\\cdot}\\\\,\";\n        break;\n\n      case 'electron dot':\n        res = \"\\\\mkern1mu \\\\bullet\\\\mkern1mu \";\n        break;\n\n      case 'KV x':\n        res = \"{\\\\times}\";\n        break;\n\n      case 'prime':\n        res = \"\\\\prime \";\n        break;\n\n      case 'cdot':\n        res = \"\\\\cdot \";\n        break;\n\n      case 'tight cdot':\n        res = \"\\\\mkern1mu{\\\\cdot}\\\\mkern1mu \";\n        break;\n\n      case 'times':\n        res = \"\\\\times \";\n        break;\n\n      case 'circa':\n        res = \"{\\\\sim}\";\n        break;\n\n      case '^':\n        res = \"uparrow\";\n        break;\n\n      case 'v':\n        res = \"downarrow\";\n        break;\n\n      case 'ellipsis':\n        res = \"\\\\ldots \";\n        break;\n\n      case '/':\n        res = \"/\";\n        break;\n\n      case ' / ':\n        res = \"\\\\,/\\\\,\";\n        break;\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n      // Missing texify rule or unknown MhchemParser output\n    }\n    return res;\n  },\n  _getArrow: function _getArrow(a) {\n    switch (a) {\n      case \"->\":\n        return \"rightarrow\";\n\n      case \"\\u2192\":\n        return \"rightarrow\";\n\n      case \"\\u27F6\":\n        return \"rightarrow\";\n\n      case \"<-\":\n        return \"leftarrow\";\n\n      case \"<->\":\n        return \"leftrightarrow\";\n\n      case \"<-->\":\n        return \"rightleftarrows\";\n\n      case \"<=>\":\n        return \"rightleftharpoons\";\n\n      case \"\\u21CC\":\n        return \"rightleftharpoons\";\n\n      case \"<=>>\":\n        return \"rightequilibrium\";\n\n      case \"<<=>\":\n        return \"leftequilibrium\";\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  },\n  _getBond: function _getBond(a) {\n    switch (a) {\n      case \"-\":\n        return \"{-}\";\n\n      case \"1\":\n        return \"{-}\";\n\n      case \"=\":\n        return \"{=}\";\n\n      case \"2\":\n        return \"{=}\";\n\n      case \"#\":\n        return \"{\\\\equiv}\";\n\n      case \"3\":\n        return \"{\\\\equiv}\";\n\n      case \"~\":\n        return \"{\\\\tripledash}\";\n\n      case \"~-\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.1em}{$-$}}\\\\raisebox{.1em}{$\\\\tripledash$}}\";\n\n      case \"~=\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n\n      case \"~--\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n\n      case \"-~-\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$-$}}\\\\tripledash}\";\n\n      case \"...\":\n        return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n\n      case \"....\":\n        return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n\n      case \"->\":\n        return \"{\\\\rightarrow}\";\n\n      case \"<-\":\n        return \"{\\\\leftarrow}\";\n\n      case \"<\":\n        return \"{<}\";\n\n      case \">\":\n        return \"{>}\";\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  },\n  _getOperator: function _getOperator(a) {\n    switch (a) {\n      case \"+\":\n        return \" {}+{} \";\n\n      case \"-\":\n        return \" {}-{} \";\n\n      case \"=\":\n        return \" {}={} \";\n\n      case \"<\":\n        return \" {}<{} \";\n\n      case \">\":\n        return \" {}>{} \";\n\n      case \"<<\":\n        return \" {}\\\\ll{} \";\n\n      case \">>\":\n        return \" {}\\\\gg{} \";\n\n      case \"\\\\pm\":\n        return \" {}\\\\pm{} \";\n\n      case \"\\\\approx\":\n        return \" {}\\\\approx{} \";\n\n      case \"$\\\\approx$\":\n        return \" {}\\\\approx{} \";\n\n      case \"v\":\n        return \" \\\\downarrow{} \";\n\n      case \"(v)\":\n        return \" \\\\downarrow{} \";\n\n      case \"^\":\n        return \" \\\\uparrow{} \";\n\n      case \"(^)\":\n        return \" \\\\uparrow{} \";\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  }\n}; //\n"],"names":["katex","context","chemParse","tokens","stateMachine","str","expectedLoc","tex","texify","mhchemParser","input","state","buffer","lastInput","watchdog","output","machine","t","iterateTransitions","i","matches","task","iA","o","a","b","iB","m","match","begExcl","begIncl","endIncl","endExcl","beg2Excl","beg2Incl","end2Incl","end2Excl","combine","_match","pattern","_findObserveGroups","endChars","braces","e","match1","group2","matchRet","mm","ret","k","n","stateArray","transitions","p","patternArray","j","tmp","isAfterD","c1","c2","c3","c4","hyphenFollows","withSpace","entityFollows","rd","rq","p1","md","mq","b5","mrm","isInner","res","cee","inputi","buf","c","d","b6","arrow"],"mappings":"0CAsDAA,EAAM,cAAc,OAAQ,SAAUC,EAAS,CAC7C,OAAOC,EAAUD,EAAQ,YAAY,CAAC,EAAE,CAAC,EAAG,IAAI,CAClD,CAAC,EAEDD,EAAM,cAAc,OAAQ,SAAUC,EAAS,CAC7C,OAAOC,EAAUD,EAAQ,YAAY,CAAC,EAAE,CAAC,EAAG,IAAI,CAClD,CAAC,EAKDD,EAAM,cAAc,eAAgB,gHAAqH,EAKzJ,IAAIE,EAAY,SAAmBC,EAAQC,EAAc,CAKvD,QAHIC,EAAM,GACNC,EAAcH,EAAO,QAAUA,EAAOA,EAAO,OAAS,CAAC,EAAE,IAAI,MAExD,EAAIA,EAAO,OAAS,EAAG,GAAK,EAAG,IAClCA,EAAO,CAAC,EAAE,IAAI,MAAQG,IAExBD,GAAO,IACPC,EAAcH,EAAO,CAAC,EAAE,IAAI,OAG9BE,GAAOF,EAAO,CAAC,EAAE,KACjBG,GAAeH,EAAO,CAAC,EAAE,KAAK,OAGhC,IAAII,EAAMC,EAAO,GAAGC,EAAa,GAAGJ,EAAKD,CAAY,CAAC,EACtD,OAAOG,CACT,EAOIE,EAAe,CAOjB,GAAI,SAAYC,EAAON,EAAc,CACnC,GAAI,CAACM,EACH,MAAO,CAAE,EAGPN,IAAiB,SACnBA,EAAe,MAGjB,IAAIO,EAAQ,IAoCRC,EAAS,CAAE,EACfA,EAAO,iBAAsB,EAC7BF,EAAQA,EAAM,QAAQ,MAAO,GAAG,EAChCA,EAAQA,EAAM,QAAQ,8BAA+B,GAAG,EACxDA,EAAQA,EAAM,QAAQ,YAAa,KAAK,EAWxC,QANIG,EACAC,EAAW,GAGXC,EAAS,CAAE,IAEF,CACPF,IAAcH,GAChBI,EAAW,GACXD,EAAYH,GAEZI,IAMF,IAAIE,EAAUP,EAAa,cAAcL,CAAY,EACjDa,EAAID,EAAQ,YAAYL,CAAK,GAAKK,EAAQ,YAAY,GAAG,EAE7DE,EAAoB,QAASC,EAAI,EAAGA,EAAIF,EAAE,OAAQE,IAAK,CACrD,IAAIC,EAAUX,EAAa,SAAS,OAAOQ,EAAEE,CAAC,EAAE,QAAST,CAAK,EAE9D,GAAIU,EAAS,CAMX,QAFIC,EAAOJ,EAAEE,CAAC,EAAE,KAEPG,EAAK,EAAGA,EAAKD,EAAK,QAAQ,OAAQC,IAAM,CAC/C,IAAIC,EAIJ,GAAIP,EAAQ,QAAQK,EAAK,QAAQC,CAAE,EAAE,KAAK,EACxCC,EAAIP,EAAQ,QAAQK,EAAK,QAAQC,CAAE,EAAE,KAAK,EAAEV,EAAQQ,EAAQ,OAAQC,EAAK,QAAQC,CAAE,EAAE,MAAM,UAClFb,EAAa,QAAQY,EAAK,QAAQC,CAAE,EAAE,KAAK,EACpDC,EAAId,EAAa,QAAQY,EAAK,QAAQC,CAAE,EAAE,KAAK,EAAEV,EAAQQ,EAAQ,OAAQC,EAAK,QAAQC,CAAE,EAAE,MAAM,MAEhG,MAAM,CAAC,aAAc,iCAAmCD,EAAK,QAAQC,CAAE,EAAE,MAAQ,GAAG,EAMtFb,EAAa,YAAYM,EAAQQ,CAAC,CACnC,CAUD,GAFAZ,EAAQU,EAAK,WAAaV,EAEtBD,EAAM,OAAS,GAKjB,GAJKW,EAAK,UACRX,EAAQU,EAAQ,WAGd,CAACC,EAAK,WACR,MAAMH,MAGR,QAAOH,CAEnB,CACO,CAKD,GAAID,GAAY,EACd,KAAM,CAAC,aAAc,8BAA8B,CAE3D,CACG,EACD,YAAa,SAAqBU,EAAGC,EAAG,CACtC,GAAIA,EACF,GAAI,MAAM,QAAQA,CAAC,EACjB,QAASC,EAAK,EAAGA,EAAKD,EAAE,OAAQC,IAC9BF,EAAE,KAAKC,EAAEC,CAAE,CAAC,OAGdF,EAAE,KAAKC,CAAC,CAGb,EACD,SAAU,CAKR,SAAU,CAER,MAAS,KACT,KAAQ,KACR,MAAS,KACT,MAAS,MACT,UAAW,kBACX,OAAU,OACV,MAAO,SACP,EAAK,KACL,GAAM,MACN,GAAM,MACN,QAAW,uQACX,UAAW,yNACX,+BAAgC,+BAChC,iCAAkC,mCAClC,+BAAgC,kMAChC,OAAU,UACV,QAAS,sDACT,qBAAsB,+BACtB,mBAAoB,SAAaf,EAAO,CACtC,IAAIiB,EAAIjB,EAAM,MAAM,uMAAuM,EAE3N,OAAIiB,GAAKA,EAAE,CAAC,EACH,CACL,OAAQA,EAAE,OAAO,CAAC,EAClB,UAAWjB,EAAM,OAAOiB,EAAE,CAAC,EAAE,MAAM,CACpC,EAGI,IACR,EACD,cAAe,SAAWjB,EAAO,CAC/B,IAAIiB,EAAIjB,EAAM,MAAM,2GAA2G,EAE/H,OAAIiB,GAAKA,EAAE,CAAC,EACH,CACL,OAAQA,EAAE,OAAO,CAAC,EAClB,UAAWjB,EAAM,OAAOiB,EAAE,CAAC,EAAE,MAAM,CACpC,EAGI,IACR,EACD,yBAA0B,SAA6BjB,EAAO,CAE5D,IAAIc,EAAIf,EAAa,SAAS,kBAAkBC,EAAO,GAAI,yBAA0B,IAAK,EAAE,EAE5F,GAAIc,GAAKA,EAAE,UAAU,MAAM,mBAAmB,EAC5C,OAAOA,EAIT,IAAIG,EAAIjB,EAAM,MAAM,mCAAmC,EAEvD,OAAIiB,EACK,CACL,OAAQA,EAAE,CAAC,EACX,UAAWjB,EAAM,OAAOiB,EAAE,CAAC,EAAE,MAAM,CACpC,EAGI,IACR,EACD,6BAA8B,yBAC9B,MAAO,kBACP,MAAO,kBACP,KAAM,WACN,IAAK,QACL,IAAK,OACL,KAAM,8BACN,MAAO,oBACP,KAAM,YACN,WAAY,SAAWjB,EAAO,CAC5B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,KAAM,GAAI,GAAI,GAAG,CACxE,EACD,WAAY,SAAYA,EAAO,CAC7B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,IAAK,IAAK,EAAE,CACxE,EACD,KAAM,qBACN,WAAY,SAAWA,EAAO,CAC5B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,iBAAkB,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAI,CAC7G,EACD,SAAU,SAAWA,EAAO,CAC1B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,iBAAkB,IAAK,EAAE,CACrF,EACD,OAAQ,sBACR,QAAS,aACT,IAAM,KACN,WAAY,SAAWA,EAAO,CAC5B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,KAAM,GAAI,GAAI,GAAG,CACxE,EACD,WAAY,SAAaA,EAAO,CAC9B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,IAAK,IAAK,EAAE,CACxE,EACD,GAAM,yBACN,WAAY,SAAYA,EAAO,CAC7B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,iBAAkB,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAI,CAC7G,EACD,SAAU,SAAYA,EAAO,CAC3B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,iBAAkB,IAAK,EAAE,CACrF,EACD,OAAQ,qBACR,KAAM,+BACN,KAAM,QACN,QAAS,SAAWA,EAAO,CACzB,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,GAAI,IAAK,IAAK,EAAE,CACvE,EACD,UAAW,SAAWA,EAAO,CAC3B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,GAAI,GAAI,GAAG,CACvE,EACD,QAAS,SAAYA,EAAO,CAC1B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,GAAI,IAAK,IAAK,EAAE,CACvE,EACD,YAAa,SAAYA,EAAO,CAC9B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,KAAM,GAAI,GAAI,IAAI,CACzE,EACD,UAAW,SAAYA,EAAO,CAC5B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,GAAI,GAAI,GAAG,CACvE,EACD,MAAO,SACP,IAAK,aACL,IAAK,MACL,KAAM,iCAEN,KAAM,cACN,oBAAqB,uCACrB,IAAK,KACL,cAAe,+BACf,SAAY,kEACZ,YAAe,2CACf,gBAAiB,SAAcA,EAAO,CACpC,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,UAAW,GAAI,GAAI,GAAG,CAC7E,EACD,KAAM,yDACN,IAAO,eACP,UAAW,SAAWA,EAAO,CAC3B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,IAAK,GAAI,GAAI,GAAG,CACvE,EACD,mBAAoB,uBACpB,MAAO,iBAEP,UAAW,SAAWA,EAAO,CAC3B,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,GAAI,iBAAkB,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAI,CAC5G,EACD,QAAS,SAAWA,EAAO,CACzB,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,GAAI,iBAAkB,IAAK,EAAE,CACpF,EACD,OAAQ,4BACR,MAAO,gCACP,QAAW,sDAEX,OAAU,UACV,gBAAiB,SAAcA,EAAO,CACpC,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,UAAW,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAG,CAC/F,EACD,mBAAoB,SAAiBA,EAAO,CAC1C,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,aAAc,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAG,CAClG,EACD,oBAAqB,SAAkBA,EAAO,CAC5C,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,cAAe,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAG,CACnG,EACD,sBAAuB,SAAoBA,EAAO,CAChD,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,gBAAiB,GAAI,GAAI,KAAM,IAAK,GAAI,GAAI,GAAG,CACtG,EACD,kBAAmB,SAAgBA,EAAO,CACxC,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,WAAY,GAAI,GAAI,GAAG,CAC9E,EACD,yBAA0B,SAAgBA,EAAO,CAC/C,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,WAAY,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAG,CAChG,EACD,uBAAwB,SAAgBA,EAAO,CAC7C,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,UAAW,KAAM,GAAI,UAAW,IAAK,GAAI,GAAI,GAAG,CACvG,EACD,cAAe,SAAYA,EAAO,CAChC,OAAOD,EAAa,SAAS,kBAAkBC,EAAO,QAAS,GAAI,GAAI,GAAG,CAC3E,EACD,WAAc,yCACd,eAAgB,6CAEhB,gBAAiB,UACjB,OAAQ,iEACR,OAAU,SAAgBA,EAAO,CAC/B,IAAIkB,EAIJ,GAFAA,EAAQlB,EAAM,MAAM,0LAA0L,EAE1MkB,EACF,MAAO,CACL,OAAQA,EAAM,CAAC,EACf,UAAWlB,EAAM,OAAOkB,EAAM,CAAC,EAAE,MAAM,CACxC,EAGH,IAAI,EAAInB,EAAa,SAAS,kBAAkBC,EAAO,GAAI,IAAK,IAAK,EAAE,EAEvE,OAAI,IAEFkB,EAAQ,EAAE,OAAO,MAAM,oFAAoF,EAEvGA,GACK,CACL,OAAQA,EAAM,CAAC,EACf,UAAWlB,EAAM,OAAOkB,EAAM,CAAC,EAAE,MAAM,CACxC,EAIE,IACR,EACD,QAAW,SAAiBlB,EAAO,CACjC,OAAO,KAAK,OAAUA,CAAK,CAC5B,EACD,gBAAiB,8BACjB,SAAY,SAAkBA,EAAO,CACnC,GAAIA,EAAM,MAAM,cAAc,EAC5B,OAAO,KAIT,IAAIkB,EAAQlB,EAAM,MAAM,qGAAqG,EAE7H,OAAIkB,EACK,CACL,OAAQA,EAAM,CAAC,EACf,UAAWlB,EAAM,OAAOkB,EAAM,CAAC,EAAE,MAAM,CACxC,EAGI,IACR,EACD,gBAAmB,2CACnB,IAAK,cACL,KAAM,gBACN,IAAK,aACN,EACD,kBAAmB,SAA2BlB,EAAOmB,EAASC,EAASC,EAASC,EAASC,EAAUC,EAAUC,EAAUC,EAAUC,EAAS,CAExI,IAAIC,EAAS,SAAgB5B,EAAO6B,EAAS,CAC3C,GAAI,OAAOA,GAAY,SACrB,OAAI7B,EAAM,QAAQ6B,CAAO,IAAM,EACtB,KAGFA,EAEP,IAAIX,EAAQlB,EAAM,MAAM6B,CAAO,EAE/B,OAAKX,EAIEA,EAAM,CAAC,EAHL,IAKZ,EAIGY,EAAqB,SAA4B9B,EAAOS,EAAGsB,EAAU,CAGvE,QAFIC,EAAS,EAENvB,EAAIT,EAAM,QAAQ,CACvB,IAAIc,EAAId,EAAM,OAAOS,CAAC,EAElBS,EAAQU,EAAO5B,EAAM,OAAOS,CAAC,EAAGsB,CAAQ,EAE5C,GAAIb,IAAU,MAAQc,IAAW,EAC/B,MAAO,CACL,cAAevB,EACf,YAAaA,EAAIS,EAAM,MACxB,EACI,GAAIJ,IAAM,IACfkB,YACSlB,IAAM,IAAK,CACpB,GAAIkB,IAAW,EACb,KAAM,CAAC,wBAAyB,yCAAyC,EAEzEA,GAEd,CAEUvB,GACV,CAEQ,OAAIuB,EAAS,EACJ,IAIV,EAEGd,EAAQU,EAAO5B,EAAOmB,CAAO,EASjC,GAPID,IAAU,OAIdlB,EAAQA,EAAM,OAAOkB,EAAM,MAAM,EACjCA,EAAQU,EAAO5B,EAAOoB,CAAO,EAEzBF,IAAU,MACZ,OAAO,KAGT,IAAIe,EAAIH,EAAmB9B,EAAOkB,EAAM,OAAQG,GAAWC,CAAO,EAElE,GAAIW,IAAM,KACR,OAAO,KAGT,IAAIC,EAASlC,EAAM,UAAU,EAAGqB,EAAUY,EAAE,YAAcA,EAAE,aAAa,EAEzE,GAAMV,GAAYC,EAKX,CACL,IAAIW,EAAS,KAAK,kBAAkBnC,EAAM,OAAOiC,EAAE,WAAW,EAAGV,EAAUC,EAAUC,EAAUC,CAAQ,EAEvG,GAAIS,IAAW,KACb,OAAO,KAKT,IAAIC,EAAW,CAACF,EAAQC,EAAO,MAAM,EACrC,MAAO,CACL,OAAQR,EAAUS,EAAS,KAAK,EAAE,EAAIA,EACtC,UAAWD,EAAO,SACnB,CACT,KAlBQ,OAAO,CACL,OAAQD,EACR,UAAWlC,EAAM,OAAOiC,EAAE,WAAW,CACtC,CAgBJ,EAMD,OAAQ,SAAgBhB,EAAGjB,EAAO,CAChC,IAAI6B,EAAU9B,EAAa,SAAS,SAASkB,CAAC,EAE9C,GAAIY,IAAY,OACd,KAAM,CAAC,aAAc,iCAAmCZ,EAAI,GAAG,EAC1D,GAAI,OAAOY,GAAY,WAC5B,OAAO9B,EAAa,SAAS,SAASkB,CAAC,EAAEjB,CAAK,EAG9C,IAAIkB,EAAQlB,EAAM,MAAM6B,CAAO,EAE/B,GAAIX,EAAO,CACT,IAAImB,EAEJ,OAAInB,EAAM,CAAC,EACTmB,EAAK,CAACnB,EAAM,CAAC,EAAGA,EAAM,CAAC,CAAC,EACfA,EAAM,CAAC,EAChBmB,EAAKnB,EAAM,CAAC,EAEZmB,EAAKnB,EAAM,CAAC,EAGP,CACL,OAAQmB,EACR,UAAWrC,EAAM,OAAOkB,EAAM,CAAC,EAAE,MAAM,CACxC,CACX,CAEQ,OAAO,IAEf,CACG,EAID,QAAS,CACP,KAAM,SAAWhB,EAAQe,EAAG,CAC1Bf,EAAO,GAAKA,EAAO,GAAK,IAAMe,CAC/B,EACD,KAAM,SAAWf,EAAQe,EAAG,CAC1Bf,EAAO,GAAKA,EAAO,GAAK,IAAMe,CAC/B,EACD,KAAM,SAAWf,EAAQe,EAAG,CAC1Bf,EAAO,GAAKA,EAAO,GAAK,IAAMe,CAC/B,EACD,KAAM,SAAWf,EAAQe,EAAG,CAC1Bf,EAAO,GAAKA,EAAO,GAAK,IAAMe,CAC/B,EACD,KAAM,SAAWf,EAAQe,EAAG,CAC1Bf,EAAO,GAAKA,EAAO,GAAK,IAAMe,CAC/B,EACD,KAAM,SAAWf,EAAQe,EAAG,CAC1Bf,EAAO,GAAKA,EAAO,GAAK,IAAMe,CAC/B,EACD,MAAO,SAAYf,EAAQe,EAAG,CAC5Bf,EAAO,IAAMA,EAAO,IAAM,IAAMe,CACjC,EACD,QAAS,SAAcf,EAAQe,EAAG,CAChCf,EAAO,OAASA,EAAO,OAAS,IAAMe,CACvC,EACD,OAAU,SAAgBf,EAAQe,EAAG,EAAG,CACtC,MAAO,CACL,MAAO,CACR,CACF,EACD,YAAa,SAAkBf,EAAQe,EAAG,EAAG,CAC3C,MAAO,CACL,MAAO,EACP,GAAIA,CACL,CACF,EACD,eAAgB,SAAoBf,EAAQe,EAAG,EAAG,CAChD,MAAO,CACL,MAAO,EACP,GAAIA,EAAE,CAAC,EACP,GAAIA,EAAE,CAAC,CACR,CACF,EACD,KAAQ,SAAcf,EAAQe,EAAG,CAC/B,OAAOA,CACR,EACD,GAAM,SAAYf,EAAQe,EAAG,CAC3B,MAAO,CACL,MAAO,KACP,GAAIA,GAAK,EACV,CACF,EACD,KAAQ,SAAcf,EAAQe,EAAG,CAC/B,OAAOlB,EAAa,GAAGkB,EAAG,MAAM,CACjC,EACD,SAAU,SAAcf,EAAQe,EAAG,CACjC,IAAIqB,EAAM,CAAC,GAAG,EACd,OAAAvC,EAAa,YAAYuC,EAAKvC,EAAa,GAAGkB,EAAG,MAAM,CAAC,EACxDqB,EAAI,KAAK,GAAG,EACLA,CACR,EACD,WAAY,SAAiBpC,EAAQe,EAAG,CACtC,OAAOlB,EAAa,GAAGkB,EAAG,UAAU,CACrC,EACD,iBAAkB,SAAsBf,EAAQe,EAAG,CACjD,OAAOlB,EAAa,GAAGkB,EAAG,gBAAgB,CAC3C,EACD,KAAQ,SAAcf,EAAQe,EAAGsB,EAAG,CAClC,MAAO,CACL,MAAO,OACP,MAAOA,GAAKtB,CACb,CACF,EACD,gBAAiB,SAAsBf,EAAQe,EAAG,CAChD,MAAO,CACL,MAAO,SACP,MAAOA,EAAE,CAAC,CACX,CACF,EACD,GAAM,SAAYf,EAAQe,EAAG,CAC3B,OAAOlB,EAAa,GAAGkB,CAAC,CACzB,EACD,MAAO,SAAWf,EAAQe,EAAG,CAE3B,IAAIqB,EAAM,CAAE,EAERrB,EAAE,MAAM,QAAQ,IAClBqB,EAAI,KAAKrB,EAAE,OAAO,EAAG,CAAC,CAAC,EACvBA,EAAIA,EAAE,OAAO,CAAC,GAGhB,IAAIuB,EAAIvB,EAAE,MAAM,wDAAwD,EACxE,OAAAuB,EAAE,CAAC,EAAIA,EAAE,CAAC,EAAE,QAAQ,MAAO,EAAE,EAC7BF,EAAI,KAAK,CACP,MAAO,OACP,GAAIE,EAAE,CAAC,EACP,GAAIA,EAAE,CAAC,CACf,CAAO,EAEGA,EAAE,CAAC,IACLA,EAAE,CAAC,EAAIA,EAAE,CAAC,EAAE,QAAQ,MAAO,EAAE,EAC7BF,EAAI,KAAK,CACP,MAAO,WACP,GAAIE,EAAE,CAAC,CACjB,CAAS,GAGIF,CACR,EACD,MAAO,SAAWpC,EAAQe,EAAG,CAC3B,OAAOlB,EAAa,GAAGkB,EAAG,KAAK,CACrC,CACG,EAMD,kBAAmB,SAA2BJ,EAAG,CAC/C,IAAIgB,EAAS5B,EAGTwC,EACA,EAMAC,EAAc,CAAE,EAEpB,IAAKb,KAAWhB,EACd,IAAKZ,KAASY,EAAEgB,CAAO,EAIrB,IAHAY,EAAaxC,EAAM,MAAM,GAAG,EAC5BY,EAAEgB,CAAO,EAAE5B,CAAK,EAAE,WAAawC,EAE1B,EAAI,EAAG,EAAIA,EAAW,OAAQ,IACjCC,EAAYD,EAAW,CAAC,CAAC,EAAI,CAAE,EAQrC,IAAKZ,KAAWhB,EACd,IAAKZ,KAASY,EAAEgB,CAAO,EAGrB,IAFAY,EAAa5B,EAAEgB,CAAO,EAAE5B,CAAK,EAAE,YAAc,CAAE,EAE1C,EAAI,EAAG,EAAIwC,EAAW,OAAQ,IAAK,CAOtC,IAAIE,EAAI9B,EAAEgB,CAAO,EAAE5B,CAAK,EAExB,GAAI0C,EAAE,QAAS,CACbA,EAAE,QAAU,CAAA,EAAG,OAAOA,EAAE,OAAO,EAE/B,QAASJ,EAAI,EAAGA,EAAII,EAAE,QAAQ,OAAQJ,IAChC,OAAOI,EAAE,QAAQJ,CAAC,GAAM,WAC1BI,EAAE,QAAQJ,CAAC,EAAI,CACb,MAAOI,EAAE,QAAQJ,CAAC,CACnB,EAGjB,MACYI,EAAE,QAAU,CAAE,EAQhB,QAFIC,EAAef,EAAQ,MAAM,GAAG,EAE3BgB,EAAI,EAAGA,EAAID,EAAa,OAAQC,IACvC,GAAIJ,EAAW,CAAC,IAAM,IAEpB,QAASlC,KAAKmC,EACZA,EAAYnC,CAAC,EAAE,KAAK,CAClB,QAASqC,EAAaC,CAAC,EACvB,KAAMF,CACxB,CAAiB,OAGHD,EAAYD,EAAW,CAAC,CAAC,EAAE,KAAK,CAC9B,QAASG,EAAaC,CAAC,EACvB,KAAMF,CACtB,CAAe,CAGf,CAII,OAAOD,CACR,EACD,cAAe,CAAA,CACjB,EAIA3C,EAAa,cAAgB,CAK3B,GAAM,CAEJ,YAAaA,EAAa,kBAAkB,CAC1C,MAAS,CACP,IAAK,CACH,QAAS,QACnB,CACO,EACD,KAAQ,CACN,QAAS,CACP,QAAS,uBACT,QAAS,GACT,WAAY,EACtB,CACO,EACD,WAAc,CACZ,EAAK,CACH,QAAS,kBACnB,CACO,EACD,IAAO,CACL,EAAK,CACH,QAAS,OACT,UAAW,IACZ,EACD,GAAM,CACJ,QAAS,OACT,UAAW,KACrB,CACO,EACD,YAAe,CACb,WAAY,CACV,QAAS,CAAC,WAAY,SAAU,UAAU,EAC1C,UAAW,GACrB,CACO,EACD,gBAAmB,CACjB,QAAS,CACP,QAAS,CAAC,KAAM,QAAQ,EACxB,UAAW,GACrB,CACO,EACD,QAAW,CACT,UAAW,CACT,QAAS,KACT,UAAW,GACrB,CACO,EACD,KAAM,CACJ,UAAW,CACT,QAAS,KACT,UAAW,GACZ,EACD,OAAQ,CACN,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACZ,EACD,IAAK,CACH,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACrB,CACO,EACD,IAAK,CACH,EAAK,CACH,QAAS,QACT,UAAW,GACZ,EACD,MAAO,CACL,QAAS,KACT,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,IACZ,EACD,QAAS,CACP,QAAS,KACT,UAAW,IACZ,EACD,GAAM,CACJ,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACZ,EACD,EAAK,CACH,QAAS,CAAC,WAAY,SAAU,UAAU,EAC1C,UAAW,GACrB,CACO,EACD,OAAU,CACR,MAAO,CACL,QAAS,KACT,UAAW,GACrB,CACO,EACD,cAAe,CACb,aAAc,CACZ,QAAS,CAAC,WAAY,SAAU,CAC9B,MAAO,WACP,OAAQ,MACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,SAAY,CACV,aAAc,CACZ,QAAS,CAAC,WAAY,SAAU,UAAU,EAC1C,UAAW,GACrB,CACO,EACD,KAAM,CACJ,MAAO,CACL,QAAS,CAAC,iBAAkB,QAAQ,EACpC,UAAW,IACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,GACZ,EACD,EAAK,CACH,QAAS,CAAC,SAAU,CAClB,MAAO,OACP,OAAQ,GACpB,CAAW,EACD,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,IACZ,EACD,GAAM,CACJ,QAAS,KACT,UAAW,IACZ,EACD,QAAS,CACP,QAAS,CAAC,SAAU,CAClB,MAAO,OACP,OAAQ,GACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,KAAM,CACJ,MAAO,CACL,QAAS,CAAC,SAAU,CAClB,MAAO,SACP,OAAQ,QACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,oBAAqB,CACnB,EAAK,CACH,QAAS,CAAC,SAAU,CAClB,MAAO,SACP,OAAQ,QACpB,CAAW,EACD,UAAW,GACZ,EACD,EAAK,CACH,QAAS,CAAC,SAAU,CAClB,MAAO,SACP,OAAQ,QACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,IAAK,CACH,QAAS,CACP,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,sBAAuB,CACxB,MAAO,OACP,OAAQ,GACpB,CAAW,EACD,UAAW,GACZ,EACD,EAAK,CACH,QAAS,CACP,MAAO,OACP,OAAQ,GACpB,CACS,EACD,EAAK,CACH,QAAS,CAAC,SAAU,CAClB,MAAO,SACP,OAAQ,QACpB,CAAW,EACD,UAAW,GACZ,EACD,GAAM,CACJ,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACpB,EAAa,CACD,MAAO,OACP,OAAQ,GACpB,CAAW,EACD,UAAW,GACZ,EACD,EAAK,CACH,QAAS,IACV,EACD,EAAK,CACH,QAAS,CACP,MAAO,cACP,OAAQ,EACT,EACD,UAAW,GACZ,EACD,EAAK,CACH,QAAS,CACP,MAAO,cACP,OAAQ,EACT,EACD,UAAW,GACZ,EACD,UAAW,CACT,QAAS,CACP,MAAO,cACP,OAAQ,EACT,EACD,UAAW,GACZ,EACD,SAAU,CACR,QAAS,CAAC,SAAU,CAClB,MAAO,OACP,OAAQ,GACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,QAAW,CACT,MAAO,CACL,QAAS,KACT,UAAW,GACrB,CACO,EACD,QAAW,CACT,wBAAyB,CACvB,QAAS,KACT,UAAW,GACZ,EACD,OAAQ,CACN,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACZ,EACD,YAAa,CACX,QAAS,YACT,UAAW,GACrB,CACO,EACD,OAAU,CACR,EAAK,CACH,QAAS,KACT,UAAW,GACZ,EACD,MAAO,CACL,QAAS,KACT,UAAW,IACZ,EACD,EAAK,CACH,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,GACrB,CACO,EACD,UAAW,CACT,SAAU,CAAA,CACX,EACD,MAAS,CACP,EAAK,CACH,UAAW,IACZ,EACD,EAAK,CACH,QAAS,UACV,EACD,MAAO,CACL,QAAS,SACV,EACD,kBAAmB,CACjB,QAAS,SACT,UAAW,GACZ,EACD,IAAK,CACH,QAAS,CAAC,SAAU,SAAS,EAC7B,UAAW,GACrB,CACO,EACD,mBAAoB,CAClB,MAAO,CACL,QAAS,CAAC,SAAU,CAClB,MAAO,YACP,OAAQ,kBACT,CAAA,CACF,EACD,IAAK,CACH,QAAS,CAAC,SAAU,CAClB,MAAO,YACP,OAAQ,kBACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,UAAW,CACT,OAAQ,CACN,QAAS,MACT,UAAW,IACZ,EACD,SAAU,CACR,QAAS,MACT,UAAW,KACrB,CACO,EACD,MAAO,CACL,iBAAkB,CAChB,QAAS,CAAC,SAAU,CAClB,MAAO,OACP,OAAQ,KACpB,CAAW,EACD,UAAW,GACZ,EACD,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACpB,EAAa,CACD,MAAO,SACP,OAAQ,UACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,QAAS,CACP,IAAK,CACH,QAAS,CAAC,SAAU,CAClB,MAAO,SACP,OAAQ,mBACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,yBAA0B,CACxB,IAAK,CACH,QAAS,CAAC,SAAU,sBAAsB,EAC1C,UAAW,GACrB,CACO,EACD,MAAO,CACL,SAAU,CACR,QAAS,CAAC,KAAM,SAAU,oBAAoB,EAC9C,UAAW,GACZ,EACD,UAAW,CACT,QAAS,CAAC,KAAM,SAAU,oBAAoB,EAC9C,UAAW,GACZ,EACD,IAAK,CACH,QAAS,CAAC,SAAU,KAAM,SAAU,oBAAoB,EACxD,UAAW,GACrB,CACO,EACD,MAAO,CACL,mBAAoB,CAClB,QAAS,CAAC,KAAM,oBAAoB,EACpC,UAAW,GACZ,EACD,sBAAuB,CACrB,QAAS,CAAC,SAAU,KAAM,oBAAoB,EAC9C,UAAW,GACrB,CACO,EACD,KAAM,CACJ,IAAK,CACH,QAAS,CAAC,SAAU,OAAO,EAC3B,UAAW,GACrB,CACO,EACD,KAAM,CAEJ,IAAK,CAAA,CACN,EACD,oBAAqB,CACnB,WAAY,CACV,QAAS,KACT,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,IACZ,EACD,MAAO,CACL,QAAS,QACT,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,IACZ,EACD,eAAgB,CACd,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACrB,CACO,EACD,4BAA8B,CAC5B,WAAY,CACV,QAAS,KACT,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,IACZ,EACD,MAAO,CACL,QAAS,QACT,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,IACZ,EACD,YAAa,CACX,QAAS,IACV,EACD,GAAM,CACJ,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACrB,CACO,EACD,6BAA8B,CAC5B,iBAAkB,CAChB,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACrB,CACO,EACD,4CAA6C,CAC3C,WAAY,CACV,QAAS,KACT,UAAW,GACZ,EACD,EAAK,CACH,QAAS,KACT,UAAW,IACZ,EACD,MAAO,CACL,QAAS,KACT,UAAW,GACZ,EACD,MAAO,CACL,QAAS,KACT,UAAW,IACZ,EACD,aAAc,CACZ,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACrB,CACO,EACD,MAAO,CACL,gCAAiC,CAC/B,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,MAAM,EACT,UAAW,GACrB,CACO,EACD,IAAK,CACH,iBAAkB,CAChB,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACpB,EAAa,CACD,MAAO,OACP,OAAQ,GACpB,CAAW,EACD,UAAW,GACrB,CACO,EACD,KAAM,CACJ,IAAK,CACH,QAAS,CACP,MAAO,SACP,OAAQ,CACT,EACD,UAAW,GACrB,CACO,EACD,QAAS,CACP,sBAAuB,CACrB,QAAS,KACT,UAAW,GACZ,EACD,mBAAoB,CAClB,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACrB,CACO,EACD,QAAS,CACP,EAAK,CACH,QAAS,IACV,EAED,sBAAuB,CACrB,QAAS,KACT,UAAW,GACZ,EAED,OAAQ,CACN,QAAS,IACV,EACD,iBAAkB,CAChB,QAAS,CAAC,SAAU,IAAI,EACxB,UAAW,GACrB,CACO,EACD,gBAAiB,CACf,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,MAAM,EACT,UAAW,GACrB,CACO,EACD,gBAAiB,CACf,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,aAAa,EAChB,UAAW,GACrB,CACO,EACD,mBAAoB,CAClB,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,gBAAgB,EACnB,UAAW,GACrB,CACO,EACD,oBAAqB,CACnB,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,iBAAiB,EACpB,UAAW,GACrB,CACO,EACD,sBAAuB,CACrB,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,mBAAmB,EACtB,UAAW,GACrB,CACO,EACD,8CAA+C,CAC7C,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,cAAc,EACjB,UAAW,GACrB,CACO,EACD,kBAAmB,CACjB,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACpB,EAAa,eAAe,CAC5B,CACO,EACD,cAAe,CACb,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,IAAI,EACP,UAAW,GACrB,CACO,EACD,MAAO,CACL,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,MAAM,EACT,UAAW,GACrB,CACO,EACD,oBAAqB,CACnB,2BAA4B,CAC1B,QAAS,CAAC,KAAM,QAAQ,EACxB,UAAW,GACZ,EACD,IAAK,CACH,QAAS,CAAC,SAAU,KAAM,QAAQ,EAClC,UAAW,GACrB,CACO,EACD,OAAU,CACR,IAAK,CACH,QAAS,CAAC,CACR,MAAO,SACP,OAAQ,CACT,EAAE,MAAM,EACT,UAAW,GACrB,CACO,EACD,MAAS,CACP,EAAK,CACH,QAAS,SACT,UAAW,IACX,QAAS,EACV,EACD,GAAM,CACJ,QAAS,CAAC,SAAU,SAAS,EAC7B,UAAW,IACX,QAAS,EACV,EACD,kBAAmB,CACjB,QAAS,CAAC,QAAQ,EAClB,UAAW,IACX,QAAS,EACV,EACD,IAAK,CACH,QAAS,CAAC,SAAU,MAAM,EAC1B,UAAW,GACrB,CACA,CACA,CAAK,EACD,QAAS,CACP,YAAa,SAAiBG,EAAQe,EAAG,CACvC,IAAIqB,EAEJ,IAAKpC,EAAO,GAAK,IAAI,MAAM,UAAU,EAAG,CACtC,IAAI4C,EAAM5C,EAAO,EACjBA,EAAO,EAAI,OACXoC,EAAM,KAAK,OAAUpC,CAAM,EAC3BA,EAAO,EAAI4C,CACrB,MACUR,EAAM,KAAK,OAAUpC,CAAM,EAG7B,OAAAH,EAAa,QAAQ,IAAI,EAAEG,EAAQe,CAAC,EAC7BqB,CACR,EACD,QAAS,SAAapC,EAAQe,EAAG,CAC/Bf,EAAO,EAAIe,EACXf,EAAO,MAAQ,IAChB,EACD,iBAAkB,SAAsBA,EAAQe,EAAG,CACjD,GAAIf,EAAO,eAAmB,CAE5B,IAAIoC,EAAM,CAAE,EACZ,OAAAvC,EAAa,YAAYuC,EAAK,KAAK,OAAUpC,CAAM,CAAC,EACpDH,EAAa,YAAYuC,EAAKvC,EAAa,QAAQ,KAAQG,EAAQe,EAAG,GAAG,CAAC,EACnEqB,CACjB,MACUpC,EAAO,EAAIe,CAEd,EACD,cAAe,SAAiBf,EAAQe,EAAG8B,EAAU,CACnD,IAAIC,EAAKjD,EAAa,SAAS,OAAO,UAAWG,EAAO,GAAK,EAAE,EAC3D+C,EAAKlD,EAAa,SAAS,OAAO,+BAAgCG,EAAO,GAAK,EAAE,EAChFgD,EAAKnD,EAAa,SAAS,OAAO,+BAAgCG,EAAO,GAAK,EAAE,EAChFiD,EAAKpD,EAAa,SAAS,OAAO,iCAAkCG,EAAO,GAAK,EAAE,EAClFkD,EAAgBnC,IAAM,MAAQ+B,GAAMA,EAAG,YAAc,IAAMC,GAAMC,GAAMC,GAEvEC,GAAiB,CAAClD,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAAC8C,GAAME,IAC3FhD,EAAO,EAAI,IAAMA,EAAO,EAAI,KAK9B,IAAIoC,EAAM,CAAE,EAEZ,OAAIc,GACFrD,EAAa,YAAYuC,EAAK,KAAK,OAAUpC,CAAM,CAAC,EACpDoC,EAAI,KAAK,CACP,MAAO,QACnB,CAAW,IAEDU,EAAKjD,EAAa,SAAS,OAAO,SAAUG,EAAO,GAAK,EAAE,EAEtD6C,GAAYC,GAAMA,EAAG,YAAc,IACrCjD,EAAa,YAAYuC,EAAKvC,EAAa,QAAQ,IAAI,EAAEG,EAAQe,CAAC,CAAC,EACnElB,EAAa,YAAYuC,EAAK,KAAK,OAAUpC,CAAM,CAAC,IAEpDH,EAAa,YAAYuC,EAAK,KAAK,OAAUpC,CAAM,CAAC,EACpDH,EAAa,YAAYuC,EAAKvC,EAAa,QAAQ,KAAQG,EAAQe,EAAG,GAAG,CAAC,IAIvEqB,CACR,EACD,SAAU,SAAcpC,EAAQ,CAC9BA,EAAO,EAAIA,EAAO,EAClBA,EAAO,EAAI,MACZ,EACD,UAAW,SAAgBA,EAAQ,CACjCA,EAAO,GAAK,EACb,EACD,WAAY,SAAiBA,EAAQ,CACnCA,EAAO,GAAK,EACb,EACD,sBAAuB,SAA4BA,EAAQ,CACzDA,EAAO,eAAoB,EAC5B,EACD,uBAAwB,SAA6BA,EAAQ,CAC3DA,EAAO,eAAoB,EAC5B,EACD,qBAAsB,SAA0BA,EAAQ,CACtDA,EAAO,kBACR,EACD,qBAAsB,SAA0BA,EAAQ,CACtDA,EAAO,kBACR,EACD,uBAAwB,SAA4BA,EAAQe,EAAG,CAC7D,MAAO,CACL,MAAO,uBACP,GAAIlB,EAAa,GAAGkB,EAAG,GAAG,CAC3B,CACF,EACD,MAAS,SAAef,EAAQe,EAAG,CACjC,IAAI,EAAIA,EAAE,QAAQ,OAAQ,EAAE,EACxBoC,EAAY,IAAMpC,EAEtB,OAAIoC,GAAanD,EAAO,mBAAwB,EACvC,CACL,MAAO,sBACP,GAAI,CACL,EAEM,CACL,MAAO,sBACP,GAAI,CACL,CAEJ,EACD,OAAU,SAAgBA,EAAQe,EAAGqC,EAAe,CAOlD,IAAIhB,EAEJ,GAAI,CAACpC,EAAO,EACVoC,EAAM,CAAE,EAEJ,CAACpC,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACoD,IAC7EpD,EAAO,IACToC,EAAI,KAAK,CACP,MAAO,YACvB,CAAe,EAGC,CAACpC,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,GAAKoD,IAAkB,GACrFpD,EAAO,EAAIA,EAAO,EAClBA,EAAO,EAAI,QACF,CAACA,EAAO,GAAK,CAACA,EAAO,GAAK,CAACA,EAAO,IAAMA,EAAO,GAAKA,EAAO,IACpEA,EAAO,EAAIA,EAAO,EAClBA,EAAO,EAAIA,EAAO,EAClBA,EAAO,EAAIA,EAAO,EAClBA,EAAO,EAAIA,EAAO,EAAIA,EAAO,EAAI,QAE7BA,EAAO,GAAKA,EAAO,QAAU,MAAQH,EAAa,SAAS,OAAO,eAAgBG,EAAO,GAAK,EAAE,EAClGA,EAAO,MAAQ,YACNA,EAAO,GAAKA,EAAO,QAAU,MAAQ,CAACA,EAAO,IACtDA,EAAO,MAAQ,QAInBoC,EAAI,KAAK,CACP,MAAO,WACP,EAAGvC,EAAa,GAAGG,EAAO,EAAG,GAAG,EAChC,EAAGH,EAAa,GAAGG,EAAO,EAAG,IAAI,EACjC,EAAGH,EAAa,GAAGG,EAAO,EAAG,IAAI,EACjC,EAAGH,EAAa,GAAGG,EAAO,EAAG,GAAG,EAChC,EAAGH,EAAa,GAAGG,EAAO,EAAG,IAAI,EACjC,EAAGH,EAAa,GAAGG,EAAO,EAAGA,EAAO,QAAU,YAAc,YAAc,IAAI,EAC9E,MAAOA,EAAO,KAC5B,CAAa,OAEE,CAIL,IAAIqD,EAEArD,EAAO,MAAQ,IACjBqD,EAAKxD,EAAa,GAAGG,EAAO,GAAI,UAAU,EACjCA,EAAO,MAAQ,IACxBqD,EAAK,CAAC,CACJ,MAAO,OACP,GAAIrD,EAAO,IAAM,EAC/B,CAAa,EAEDqD,EAAKxD,EAAa,GAAGG,EAAO,EAAE,EAKhC,IAAIsD,EAEAtD,EAAO,MAAQ,IACjBsD,EAAKzD,EAAa,GAAGG,EAAO,GAAI,UAAU,EACjCA,EAAO,MAAQ,IACxBsD,EAAK,CAAC,CACJ,MAAO,OACP,GAAItD,EAAO,IAAM,EAC/B,CAAa,EAEDsD,EAAKzD,EAAa,GAAGG,EAAO,EAAE,EAGhCoC,EAAM,CACJ,MAAO,QACP,EAAGpC,EAAO,EACV,GAAIqD,EACJ,GAAIC,CACL,CACX,CAEQ,QAASb,KAAKzC,EACRyC,IAAM,oBAAsBA,IAAM,kBACpC,OAAOzC,EAAOyC,CAAC,EAInB,OAAOL,CACR,EACD,mBAAoB,SAAyBpC,EAAQe,EAAG,CACtD,IAAIqB,EAAM,CAAC,GAAG,EACd,OAAAvC,EAAa,YAAYuC,EAAKvC,EAAa,GAAGkB,EAAG,WAAW,CAAC,EAC7DqB,EAAI,KAAK,GAAG,EACLA,CACR,EACD,cAAe,SAAoBpC,EAAQe,EAAG,CAC5C,MAAO,CACL,MAAO,UACP,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,EACxB,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,CACzB,CACF,EACD,iBAAkB,SAAuBf,EAAQe,EAAG,CAClD,MAAO,CACL,MAAO,UACP,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,EACxB,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,CACzB,CACF,EACD,kBAAmB,SAAwBf,EAAQe,EAAG,CACpD,MAAO,CACL,MAAO,WACP,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,EACxB,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,CACzB,CACF,EACD,oBAAqB,SAA0Bf,EAAQe,EAAG,CACxD,MAAO,CACL,MAAO,aACP,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,EACxB,GAAIlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,CACzB,CACF,EACD,eAAgB,SAAqBf,EAAQe,EAAG,CAC9C,MAAO,CACL,MAAO,QACP,OAAQA,EAAE,CAAC,EACX,OAAQlB,EAAa,GAAGkB,EAAE,CAAC,CAAC,CAC7B,CACF,EACD,KAAM,SAAWf,EAAQe,EAAG,CAC1Bf,EAAO,EAAIe,CACZ,EACD,OAAQ,SAAaf,EAAQe,EAAG,CAC9Bf,EAAO,IAAMe,CACd,EACD,MAAO,SAAYf,EAAQe,EAAG,CAC5Bf,EAAO,GAAKe,CACb,EACD,OAAQ,SAAaf,EAAQe,EAAG,CAC9Bf,EAAO,IAAMe,CACd,EACD,MAAO,SAAYf,EAAQe,EAAG,CAC5Bf,EAAO,GAAKe,CACb,EACD,SAAY,SAAkBf,EAAQe,EAAGwC,EAAI,CAC3C,MAAO,CACL,MAAO,WACP,MAAOA,GAAMxC,CACd,CACT,CACA,CACG,EACD,EAAK,CACH,YAAalB,EAAa,kBAAkB,CAC1C,MAAS,CACP,IAAK,CAAA,CACN,EACD,OAAQ,CACN,EAAK,CACH,QAAS,KACnB,CACO,EACD,KAAQ,CACN,EAAK,CACH,UAAW,IACX,QAAS,EACnB,CACO,EACD,UAAW,CACT,IAAK,CACH,QAAS,iBACT,UAAW,GACrB,CACO,EACD,IAAK,CACH,IAAK,CACH,QAAS,CACP,MAAO,SACP,OAAQ,cACpB,CACA,CACO,EACD,MAAS,CACP,IAAK,CACH,QAAS,MACnB,CACA,CACA,CAAK,EACD,QAAS,CAAA,CACV,EACD,EAAK,CACH,YAAaA,EAAa,kBAAkB,CAC1C,MAAS,CACP,IAAK,CAAA,CACN,EACD,OAAQ,CACN,EAAK,CACH,QAAS,KACnB,CACO,EACD,KAAQ,CACN,EAAK,CACH,UAAW,IACX,QAAS,EACnB,CACO,EACD,QAAW,CACT,IAAK,CACH,QAAS,IACnB,CACO,EACD,OAAQ,CACN,IAAK,CACH,QAAS,CACP,MAAO,SACP,OAAQ,OACpB,CACA,CACO,EACD,oBAAqB,CACnB,IAAK,CACH,QAAS,MACnB,CACO,EACD,oBAAqB,CACnB,IAAK,CACH,QAAS,UACnB,CACO,EACD,UAAW,CACT,IAAK,CACH,QAAS,QACnB,CACO,EACD,MAAS,CACP,IAAK,CACH,QAAS,MACnB,CACA,CACA,CAAK,EACD,QAAS,CAAA,CACV,EACD,KAAQ,CACN,YAAaA,EAAa,kBAAkB,CAC1C,MAAS,CACP,IAAK,CACH,QAAS,QACnB,CACO,EACD,QAAS,CACP,IAAK,CACH,QAAS,OACnB,CACO,EACD,oBAAqB,CACnB,IAAK,CACH,QAAS,UACnB,CACO,EACD,UAAW,CACT,IAAK,CACH,QAAS,CAAC,SAAU,IAAI,CAClC,CACO,EACD,wBAAyB,CACvB,IAAK,CACH,QAAS,CAAC,SAAU,MAAM,CACpC,CACO,EACD,KAAQ,CACN,IAAK,CACH,QAAS,OACnB,CACA,CACA,CAAK,EACD,QAAS,CACP,OAAU,SAAgBG,EAAQ,CAChC,GAAIA,EAAO,MAAO,CAEhB,IAAIoC,EAAM,CACR,MAAO,OACP,GAAIpC,EAAO,KACZ,EAED,QAASyC,KAAKzC,EACZ,OAAOA,EAAOyC,CAAC,EAGjB,OAAOL,CACjB,CACA,CACA,CACG,EACD,GAAM,CACJ,YAAavC,EAAa,kBAAkB,CAC1C,MAAS,CACP,IAAK,CAAA,CACN,EACD,yBAA0B,CACxB,IAAK,CACH,QAAS,sBACnB,CACO,EACD,GAAM,CACJ,EAAK,CACH,UAAW,KACX,QAAS,EACnB,CACO,EACD,gBAAiB,CACf,EAAK,CACH,QAAS,KACT,UAAW,GACrB,CACO,EACD,SAAY,CACV,EAAK,CACH,UAAW,IACX,QAAS,EACnB,CACO,EACD,OAAQ,CACN,EAAK,CACH,QAAS,KACnB,CACO,EACD,KAAQ,CACN,EAAK,CACH,UAAW,KACX,QAAS,EACnB,CACO,EACD,oBAAqB,CACnB,IAAK,CACH,QAAS,UACnB,CACO,EACD,UAAW,CACT,IAAK,CACH,QAAS,MACnB,CACO,EACD,MAAO,CACL,EAAK,CACH,QAAS,UACnB,CACO,EACD,QAAW,CACT,IAAK,CACH,QAAS,IACnB,CACO,EACD,QAAS,CACP,IAAK,CACH,QAAS,KACnB,CACO,EACD,IAAK,CACH,IAAK,CACH,QAAS,CACP,MAAO,YACP,OAAQ,qBACpB,CACA,CACO,EACD,8CAA+C,CAC7C,IAAK,CACH,QAAS,cACnB,CACO,EACD,kBAAmB,CACjB,IAAK,CACH,QAAS,eACnB,CACO,EACD,cAAe,CACb,IAAK,CACH,QAAS,IACnB,CACO,EACD,wBAAyB,CACvB,IAAK,CACH,QAAS,MACnB,CACO,EACD,MAAS,CACP,IAAK,CACH,QAAS,MACnB,CACA,CACA,CAAK,EACD,QAAS,CACP,uBAAwB,SAA4BG,EAAQe,EAAG,CAC7D,MAAO,CACL,MAAO,iCACP,GAAIlB,EAAa,GAAGkB,EAAG,GAAG,CAC3B,CACF,EACD,eAAgB,SAAqBf,EAAQe,EAAG,CAC9C,MAAO,CACL,MAAO,QACP,OAAQA,EAAE,CAAC,EACX,OAAQlB,EAAa,GAAGkB,EAAE,CAAC,EAAG,IAAI,CACnC,CACT,CACA,CACG,EACD,GAAM,CACJ,YAAalB,EAAa,kBAAkB,CAC1C,MAAS,CACP,IAAK,CAAA,CACN,EACD,GAAM,CACJ,EAAK,CACH,UAAW,KACX,QAAS,EACnB,CACO,EACD,SAAY,CACV,EAAK,CACH,UAAW,IACX,QAAS,EACnB,CACO,EACD,KAAQ,CACN,EAAK,CACH,UAAW,KACX,QAAS,EACnB,CACO,EACD,qBAAsB,CACpB,IAAK,CACH,QAAS,KACnB,CACO,EACD,IAAK,CACH,IAAK,CACH,QAAS,CACP,MAAO,SACP,OAAQ,cACpB,CACA,CACO,EACD,MAAO,CACL,EAAK,CACH,QAAS,UACnB,CACO,EACD,EAAK,CACH,IAAK,CACH,QAAS,CACP,MAAO,SACP,OAAQ,MACpB,CACA,CACO,EACD,QAAW,CACT,IAAK,CACH,QAAS,IACnB,CACO,EACD,IAAM,CACJ,IAAK,CACH,QAAS,CACP,MAAO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","x_google_ignoreList":[0]}