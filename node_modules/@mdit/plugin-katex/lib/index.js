import{escapeHtml as s}from"@mdit/helper";import{tex as u}from"@mdit/plugin-tex";import{renderToString as c,ParseError as m}from"katex";const y=(t,o,a)=>{let r;try{r=c(t,{...o,displayMode:!1})}catch(e){/* istanbul ignore else -- @preserve */if(e instanceof m)console.error(e),r=`<span class='katex-error' title='${s(e.toString())}'>${s(t)}</span>`;else throw e}return a?.(r,!1)??r},M=(t,o,a)=>{let r;try{r=`<p class='katex-block'>${c(t,{...o,displayMode:!0})}</p>
`}catch(e){/* istanbul ignore else -- @preserve */if(e instanceof m)console.error(e),r=`<p class='katex-block katex-error' title='${s(e.toString())}'>${s(t)}</p>
`;else throw e}return a?.(r,!0)??r},S=async()=>{await import("katex/contrib/mhchem")},$=(t,o={})=>{const{allowInlineWithSpace:a=!1,delimiters:r,mathFence:e,logger:p=n=>n==="newLineInDisplayMode"?"ignore":"warn",macros:f={},transformer:l,...d}=o;t.use(u,{allowInlineWithSpace:a,delimiters:r,mathFence:e,render:(n,h,k)=>{const i={strict:(w,g,x)=>p(w,g,x,k)??"ignore",macros:f,throwOnError:!1,...d};return h?M(n,i,l):y(n,i,l)}})};export{$ as katex,S as loadMhchem};
//# sourceMappingURL=index.js.map
